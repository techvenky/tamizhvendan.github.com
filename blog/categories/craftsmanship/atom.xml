<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Craftsmanship | Tamizh's Thoughts]]></title>
  <link href="http://tamizhvendan.github.com/blog/categories/craftsmanship/atom.xml" rel="self"/>
  <link href="http://tamizhvendan.github.com/"/>
  <updated>2013-08-08T16:23:06+05:30</updated>
  <id>http://tamizhvendan.github.com/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An interesting JSON Model Binding behaviour in ASP.NET MVC3]]></title>
    <link href="http://tamizhvendan.github.com/blog/2012/04/13/interesting-json-model-binding/"/>
    <updated>2012-04-13T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2012/04/13/interesting-json-model-binding</id>
    <content type="html"><![CDATA[<div class='post'>
<p><strong>Introduction</strong></p> <p><a href="http://msdn.microsoft.com/en-us/library/dd410405.aspx">Model Binding</a> is one of the coolest feature in ASP.NET MVC3. Like a magic wand, your form element values, <a href="http://www.json.org/">JSON values</a>, also query string values automatically get converted to the equivalent C# object and makes the life of the developer easier.</p> <p>The default behaviour of MVC3 model binding works well in more common scenarios. But in certain cases it wont work as expected, and in such situations we need to <a href="http://odetocode.com/blogs/scott/archive/2009/04/27/6-tips-for-asp-net-mvc-model-binding.aspx">write custom model binders</a>. Two weeks before while I was working with model binding on JSON values, I’ve encountered an interesting behaviour of JSON model binding. </p> <p>If a JSON property contains a string, it get bind to a string property of the equivalent C# object. But if that same JSON property contains a empty string, while model binding, the equivalent C# object’s property is assigned to null and not to empty string! The same happened with arrays. If it contains elements, it get bind without any problems. But if the array is empty it get bind to null!!</p> <p>In this blog post, we are going to get rid of this intriguing behaviour by writing a Custom JSON model binder. Hope it would be useful and save you some hairs <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh4.ggpht.com/-hMLWJJ1A8N0/T4dGoWX_KJI/AAAAAAAAAUw/nCxcTP1Y03E/wlEmoticon-smile%25255B2%25255D.png?imgmax=800">&nbsp;</p> <p><strong>The Sample Application – “MyMobileStore”</strong></p> <p>In this blog post we are going to see a small application called “MyMobileStore”. This sample app has two features. One will help you to search the mobiles in the “MyMobileStore” by using the company name and the mobile types. An another feature will help you to find out the sales details of the mobiles from a given company for the specified mobile types.</p> <p><strong>Show me the code</strong></p> <p>Core classes</p> <p><a href="http://lh3.ggpht.com/-fxMWjV8D8Ss/T4dGqZvq7SI/AAAAAAAAAU4/P0S_EsPCuMk/s1600-h/MobileStore.Models%25255B6%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="MobileStore.Models" border="0" alt="MobileStore.Models" src="http://lh6.ggpht.com/-3-BF9lnW55U/T4dG2YfBOBI/AAAAAAAAAVA/bTqAuVRhIE0/MobileStore.Models_thumb%25255B4%25255D.png?imgmax=800" width="586" height="465"></a>&nbsp;</p> <p>As mentioned earlier, the two features of “MyMobileStore” are exposed as controller action methods as below</p> <p><a href="http://lh5.ggpht.com/-vw3lgopcU68/T4dG-qsPNYI/AAAAAAAAAVI/pP6ELrufEbs/s1600-h/MobileStore.Controller%25255B22%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="MobileStore.Controller" border="0" alt="MobileStore.Controller" src="http://lh5.ggpht.com/-YFmmpU3XOsg/T4dHDro__YI/AAAAAAAAAVQ/c1Chj14oXis/MobileStore.Controller_thumb%25255B14%25255D.png?imgmax=800" width="622" height="313"></a></p> <p>Both action methods uses a parameter of type “MobileFilter” which actually holds the filter criteria for finding out the mobiles. It has two properties, the companyname of the mobile and the collection of mobile types (Normal, DualSim or SmartPhone)</p> <p><a href="http://lh5.ggpht.com/-hn0O_INXTE0/T4dHFzxaYhI/AAAAAAAAAVY/P0PMuJnMyfI/s1600-h/MobileStore.MobileFilter%25255B4%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="MobileStore.MobileFilter" border="0" alt="MobileStore.MobileFilter" src="http://lh6.ggpht.com/-iadu7SEfjsI/T4dHItYsp7I/AAAAAAAAAVg/5PsroMEN4gA/MobileStore.MobileFilter_thumb%25255B2%25255D.png?imgmax=800" width="452" height="124"></a></p> <p>The SearchMobiles action method retrieves all the mobiles from the repository and filter it first by the company name and then by the mobile types. One small tweak, if the mobile types count is more than 3, it would take only the first 3 types (Added for demo purpose). I just left the logic of SalesDetails action method blank to keep it simple. Both actions returns a JSON result to make them consumed by ajax. </p> <p><em>(Note: I’ve violated some design principles in the sample code as I just wanted to make this blog post as simple as possible) </em></p> <p><strong>The Problem (Opportunity in my language)</strong></p> <p>In a good world, if the user selected either or both the company name and the mobiles types to be filtered, then our controller in “MyMobileStore” will happily accepts them as a parameter and continue its work without any mishaps.</p> <p><a href="http://lh4.ggpht.com/-vRXoXBgz8D4/T4dHNZ-7KcI/AAAAAAAAAVo/VVNPUSop03M/s1600-h/GoodWorld%25255B11%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="GoodWorld" border="0" alt="GoodWorld" src="http://lh6.ggpht.com/-gJQvm087Qx0/T4dHSfpRr_I/AAAAAAAAAVw/iuQi2t2NRr4/GoodWorld_thumb%25255B7%25255D.png?imgmax=800" width="661" height="239"></a></p> <p>But in the bad world, if the user missed out either the company names or the mobiles types or both, ASP.NET MVC3 treat them as nulls which might cause null reference exception and breaks the functionality!!</p> <p><a href="http://lh3.ggpht.com/-zxF7hZmWD2o/T4dHW4U4SyI/AAAAAAAAAV4/XqcJBQrPkUo/s1600-h/BadWorld%25255B11%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="BadWorld" border="0" alt="BadWorld" src="http://lh3.ggpht.com/-P_Y8J8MYteg/T4dHbSlOXcI/AAAAAAAAAWA/dZdSpd8PLEg/BadWorld_thumb%25255B7%25255D.png?imgmax=800" width="636" height="215"></a></p> <p><a href="http://lh3.ggpht.com/-2gENeQC8-Y8/T4dHe4d8_wI/AAAAAAAAAWI/HPCz3jXVDjo/s1600-h/NullException%25255B4%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="NullException" border="0" alt="NullException" src="http://lh5.ggpht.com/-RyHNe74MVW0/T4dHmUDoR2I/AAAAAAAAAWQ/qqPLk1C-ch0/NullException_thumb%25255B2%25255D.png?imgmax=800" width="587" height="224"></a></p> <p><em>(Now you might have understood why I added a tweak in the number of mobile types <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh4.ggpht.com/-hMLWJJ1A8N0/T4dGoWX_KJI/AAAAAAAAAUw/nCxcTP1Y03E/wlEmoticon-smile%25255B2%25255D.png?imgmax=800">)</em></p> <p><strong>Possible Solutions</strong></p> <ol> <li>Perform null check inside the “SearchMobiles” action method and assign empty array.  <li>Write a Custom Model Binder for “MobileFilter” and perform the null check inside the model binding logic</li></ol> <p>Though the option 1 is a simple and straightforward thing, what would you do if the “SalesDetails” action method works with the mobile types collection. You certainly need to duplicate the null checking inside it also. Let us assume that we have some more action methods in our “MyMobileStore” which has “MobileFilter” as their parameter. Do you still duplicate the null check there ?. Think!!</p> <p>If you do so, I am sorry my dear friend, you are violating the <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> principle and creating <a href="http://pragprog.com/the-pragmatic-programmer/extracts/software-entropy">a broken window</a> in your codebase! So, lets go ahead and write <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">clean code</a> by making use of Custom Model Binder for our “MobileFilter”. </p> <p><strong>The Pragmatic Solution – MobileFilterModelBinder</strong></p> <p><a href="http://lh6.ggpht.com/-WMCSZqixw84/T4dHp3lrbUI/AAAAAAAAAWY/HAnThoFkLV4/s1600-h/MobileFilterModelBinder%25255B4%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="MobileFilterModelBinder" border="0" alt="MobileFilterModelBinder" src="http://lh4.ggpht.com/-9PTZzIRxGGI/T4dHxGaIGsI/AAAAAAAAAWg/nemjRAmAxQ0/MobileFilterModelBinder_thumb%25255B2%25255D.png?imgmax=800" width="599" height="217"></a></p> <p>Our custom model binder is very simple, it just makes use of Default Model binding behaviour. After the default behaviour has been done, it checks for null values using <a href="http://msdn.microsoft.com/en-us/library/ms173224.aspx">Null-Coalescing operator</a> and assign empty values if the values are null.</p> <p>Don’t forget add the custom model binder in the Global.asax.cs file.</p> <p><a href="http://lh4.ggpht.com/-CtB3Tyf2R0A/T4dH0cXv0vI/AAAAAAAAAWo/1SolqnuzAnQ/s1600-h/Global%25255B5%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Global" border="0" alt="Global" src="http://lh4.ggpht.com/-1S7YsQtwsqg/T4dH3Q_Hy4I/AAAAAAAAAWw/KPEMvHzZM7o/Global_thumb%25255B3%25255D.png?imgmax=800" width="556" height="127"></a></p> <p>Now our “MyAppStore” is robust enough to tackle the bad world!!</p> <p><a href="http://lh4.ggpht.com/-gXZi5xzFs8A/T4dH6L3oweI/AAAAAAAAAW4/j4Lfrb41GQk/s1600-h/NoMoreBadWorld%25255B6%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="NoMoreBadWorld" border="0" alt="NoMoreBadWorld" src="http://lh6.ggpht.com/-nXUV9lG-0H0/T4dH86VvlYI/AAAAAAAAAXA/y6IipcvXf10/NoMoreBadWorld_thumb%25255B4%25255D.png?imgmax=800" width="647" height="236"></a></p> <p><strong>Conclusion</strong></p> <p>In this blog post you have seen an exciting problematic behaviour of JSON model binding in ASP.NET MVC3 and a simple way to get rid of the default model binding problems. In my next blog post I would share my experiences in how to unit test this custom model binders. You can download the source code that I have used in this blog post from <a href="http://www.box.com/s/16dbb662bb2f94babe27">here</a>.&nbsp;&nbsp; </p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Html Helpers in ASP.NET MVC3–The Cleaner Way]]></title>
    <link href="http://tamizhvendan.github.com/blog/2012/03/04/unit-testing-html-helpers-in-aspnet/"/>
    <updated>2012-03-04T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2012/03/04/unit-testing-html-helpers-in-aspnet</id>
    <content type="html"><![CDATA[<div class='post'>
<p>&nbsp;</p> <p>Would you like if your unit test have an assertion like this ?</p> <p><a href="http://lh5.ggpht.com/-FDQ2c83mm_8/T1J71NC-XCI/AAAAAAAAASI/eIpCPMZakQE/s1600-h/image5.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/-Z7XXVGQ3sX4/T1J73ct1gqI/AAAAAAAAASQ/qw-uSNrLoOE/image_thumb3.png?imgmax=800" width="628" height="69"></a></p> <p>IMHO having a unit test assertion like this with a long magical string value would become a maintenance problem with additional logic being added. It breaks with even minor changes like “adding an extra whitespace” though it is logically correct(Browsers ignores the whitespaces while rendering html)!. It is harder to debug to!!</p> <p>How can we get rid of this long string assertion ? Is there any better way to do assertion against this long magical string ejected from a <a href="http://stephenwalther.com/blog/archive/2009/03/03/chapter-6-understanding-html-helpers.aspx">HtmlHelper</a> ? One thing which strikes on my mind when I come across this problem is why don’t we parse the string as an xml and assert against the xml element instead. It might appear like laborious at the first sight, but by making use of <a href="http://msdn.microsoft.com/en-us/library/system.xml.linq.xelement.aspx">XElement</a> and <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension methods</a> we can easily do that. In the blog post we are going to see how can we implement this in a more cleaner way. </p> <p>Okay.. Enough texts.. Its time to see some code!!</p> <p>The first step is to convert the “html string” returned by the html helper to XElement. Generally most of the helpers returns <a href="http://stackoverflow.com/questions/2293357/what-is-an-mvchtmlstring-and-when-should-i-use-it">MvcHtmlString</a>, So, we can easily achieve this by writing an extension method called “ToXElement” on MvcHtmlString. </p> <p><a href="http://lh6.ggpht.com/-W07RFESAS4c/T1J74hx5WKI/AAAAAAAAASY/3aru4sQaYN4/s1600-h/image%25255B5%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-cwtnsV7pl2c/T1J763QmH1I/AAAAAAAAASg/6QKxAEGZ5uM/image_thumb%25255B2%25255D.png?imgmax=800" width="565" height="94"></a>&nbsp;&nbsp;&nbsp; </p> <p>That’s it! All set to redefine the way custom html helpers are being tested. </p> <p>Fine, Let us see it in action. We will start with a handy HtmlHelper method called “Button” which would render a “Html button tag” and here is the test to assert it.</p> <p><a href="http://lh5.ggpht.com/-za3MS4XrLpw/T1J78AnSQFI/AAAAAAAAASo/yDb5ICkLXG8/s1600-h/image%25255B17%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-Zl-hH4zYH1A/T1J7_Y9Qr3I/AAAAAAAAASw/PyWZZJMadV0/image_thumb%25255B10%25255D.png?imgmax=800" width="570" height="417"></a></p> <p>The first test uses the ToXElement extension method and assert against the XElement’s properties whereas the second test uses the “magical string with tags added” to do the assertion. Now you may feel what’s wrong with this guy the second test look clean to me, why he is making fuss about it. Yes you are correct, the second one looks clean. But it appears to be clean as the requirement in hand is very simple. </p> <p>IMHO the custom html helpers that we are building in our real world application won’t be as simple as having a button tag with just plain caption in it. </p> <p>Fine, lets see the real world. Voice from your team lead <em></em></p> <p><em>Hey! the Button HtmlHelper you designed has did a tremendous job. Can you make a small change on it so that it would <strong>generate a button with a class attribute having the value ‘appbutton’ by default</strong>. We need it because it make the button styling consistent with rest of our application ” </em></p> <p>Let us implement the feature by starting with the test for it</p> <p><a href="http://lh4.ggpht.com/-HScL-9YaD1s/T1J8Awk2YbI/AAAAAAAAAS4/Q3E6JlpRItM/s1600-h/image%25255B23%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/-MyHzxXBfdCM/T1J8DL_KgbI/AAAAAAAAATA/Vvt1j4k-KYo/image_thumb%25255B14%25255D.png?imgmax=800" width="594" height="232"></a></p> <p>Now tell me is the second test clean ? I don’t think so. The generate html string is bit long now also having double quotes inside double quotes makes it hard to read. At the same time the first test remains robust and clean. </p> <p>Still not convinced, okay just go up and see the very first test that we have wrote to test the button caption. Do you think the <strong>hard way test</strong> with the “<strong>long magical string</strong>” still pass ?? </p> <p align="center"><strong><font color="#ff0000">It would fail</font></strong></p> <p>Why ?? Here is the error message </p> <p><a href="http://lh5.ggpht.com/-K6RjhSEMhLA/T1J8EpZAZ-I/AAAAAAAAATI/TUutsjz0XdE/s1600-h/image%25255B28%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-SpmB-mDwffk/T1J8HO3Np4I/AAAAAAAAATQ/oKxboMdbr6I/image_thumb%25255B17%25255D.png?imgmax=800" width="555" height="132"></a></p> <p>Now what would you do, if you decided to persist with the “long magical string”, then your action would be editing the test as below</p> <p><a href="http://lh6.ggpht.com/-Yajc-wdfVIQ/T1J8I0PkK_I/AAAAAAAAATY/--qlo0cmunI/s1600-h/image%25255B34%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/-RJKnvJ5K8dI/T1J8LTJG_iI/AAAAAAAAATg/TAKyOA5Ej9w/image_thumb%25255B21%25255D.png?imgmax=800" width="558" height="127"></a></p> <p>Nice job. Now tell me what is the difference between this one and the below one</p> <p><a href="http://lh6.ggpht.com/-ps4dX_FO-B0/T1J8MhVBtwI/AAAAAAAAATo/u003U24qiBo/s1600-h/image%25255B42%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-i5zAV0v0JfY/T1J8O7pNIiI/AAAAAAAAATw/Fuo_4WMsFzk/image_thumb%25255B27%25255D.png?imgmax=800" width="559" height="137"></a></p> <p>Apart from the test method name everything is same. Is the test clean ? Is the test clearly saying what it is trying to assert ? What would happen if we got the requirement to add one more attribute or even more? Think !! </p> <p>But at the same time the tests which written using XElement assertion would remain healthy and their test method name mean what it is testing </p> <p><a href="http://lh6.ggpht.com/-t5GRHpUvWSI/T1J8Qh6dvqI/AAAAAAAAAT4/WaaIvzaEKCY/s1600-h/image%25255B47%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-fQ_eFoBZqnE/T1J8TPZgtFI/AAAAAAAAAUA/1wGDDsT5J8Y/image_thumb%25255B30%25255D.png?imgmax=800" width="549" height="208"></a></p> <p>I leave it you to decide which one is cleaner. </p> <p><strong>Summary</strong></p> <p>Here is the implementation of “Button HtmlHelper” that we unit tested so far</p> <p><a href="http://lh4.ggpht.com/-IBHYFHvayKk/T1J8Wio7xLI/AAAAAAAAAUI/fTeU7Q_Njg4/s1600-h/image%25255B52%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-lg0jE79JCVI/T1J8Y3QGqOI/AAAAAAAAAUQ/gif78dMv6XI/image_thumb%25255B33%25255D.png?imgmax=800" width="546" height="134"></a></p> <p>My humble request to the readers of this blog post, please take care of your “Unit tests” and give some more importance to it. An hour spent upfront would save a day in future.&nbsp;&nbsp; </p> <p>“Beauty is in the eye of the beholder”, If you have a better idea to do the same, kindly leave a comment, I am open to learn from you.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practice, Practice, Practice !!]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/09/15/practice-practice-practice/"/>
    <updated>2011-09-15T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/09/15/practice-practice-practice</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
    <p>In the pursuit of becoming a better programmer, I have come across lot of good things, which in fact have a lot of positive impact on my thinking, attitude and the way I approach a problem. &nbsp;One of such thing is the book “<a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">Passionate Programmer</a>” which I am currently reading. It is all about creating a remarkable career in software development. If you are a developer, it is a highly recommended book. &nbsp;&nbsp;&nbsp;&nbsp;</p>

    <p>There are a lot of impressive tips we can learn from this book of wisdom. One of Such tip is “Practice, Practice, and Practice!!” It talks about how to practice as a software developer. Though it seems like a mighty task, the author “Chad Fowler” convey this by breaking the might task into the following three category (Divide and Conquer Approach).</p>

<dl>
    <dt>Physical/Coordination</dt>
    <dd>
        <ul>
            <li>Learn and master the unexplored areas of the language that you are working with. Say for example, Regular Expressions</li>
            <li>Dig your language’s API and don’t reinvent the wheel</li>
        </ul>
    </dd>
    <dt>Sight Reading</dt>
    <dd>
        <ul>
            <li>Learn by reading the code </li>
            <li>Pick any of your favorite open source, explore it understand and learn the tips and tricks of the trade</li>
            <li>Add some new feature</li>
            <li>Be sure to vary the software you work with</li>
        </ul>
    </dd>
    <dt>Improvisation</dt>
    <dd>
        <ul>
            <li>Takes some structure or constraint and creating something new, on the fly on top of that structure. For example pick a simple program and try to write it with the self-imposed constraints</li>
            <li>Play with <a href="http://codekata.pragprog.com/">Code Katas</a></li>
        </ul>
    </dd> 
</dl>

<h4>It’s time for action</h4>

<p>I believe these three very fundamental aspects makes a lot of difference. So, I’ve decided to get my hands dirty with these three things and here is my list of to dos.</p>

<dl>
    <dt>Physical/Coordination – (I pick C# as its my primary language in my current role)</dt>
    <dd>
        <ul>
            <li>Regular Expressions</li>
            <li>Dynamic Programming</li>
            <li>Multithreading</li>
            <li>Parallel Programming</li>
            <li>LINQ</li>
            <li>Reflection</li>
            <li>Streams and Networking</li>
            <li>Entity Framework</li>
            <li>Data Structures and Algorithms</li>
            <li>Customizing MVC3 Framework</li>
        </ul>
    </dd>
    <dt>Sight Reading</dt>
    <dd>
        <ul>
            <li>Exploring ASP.NET MVC3 source code</li>
            <li>Exploring Nunit source Code</li>
            <li>Blog my understanding during this exploration</li>
        </ul>
    </dd>
    <dt>Improvisation</dt>
    <dd>
        <ul>
            <li>Make most of Code Katas</li>
            <li>Active participation in Technical Forums</li>
        </ul>
    </dd>
</dl>   
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A journey towards software craftsmanship]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/07/27/journey-towards-software-craftsmanship/"/>
    <updated>2011-07-27T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/07/27/journey-towards-software-craftsmanship</id>
    <content type="html"><![CDATA[<div class='post'>
<div><div><span ><p>Programming has been my passion right from the day I have seen computer. After nearly 3.7 years of experience (2 years of freelancing and 1.7 years of Industry), I found that there are lot of areas in programming where I need to improve myself especially in the art of software craftsmanship. Programming is really an art!!</p></span></div><div><span><p>Fine, I have the passion and wish to move to the next level but the key is get started and focussing my efforts on a right path. After some extensive internet searches and fruitful discussions with my colleagues, I have drawn a road map. I feel it is worth sharing through this blog as it might help someone who aspires to reach the next level in programming. </p></span></div><div><span><p>We can’t become Einstein in single night. We can’t become Sachin just by scoring a match winning century in a single match either. Likewise we can’t become a Master in Software Craftsmanship by just creating a single Killer Application. It takes a lot of efforts, passion, endurance persistence, temperament and a well-defined path to reach the top. </p></span></div><div><span><span>As a programmer/developer we all know very well about the benefits of Code Reuse. Have you ever thought of <i>Experience Reuse!! </i>Just think about it for some minutes. Obviously there is no replacement/substitute for Experience but what’s wrong in learning from others experience. It requires both hard work and smart work to make it to the next level. Here I am mentioning about smart work. Why are we doing the same mistakes which some people did already in their lives? <span style="mso-spacerun: yes;">&nbsp;</span>Why don’t we just learn it from them and get rid of those recurring mistakes. Come on, we are programmers, be smarter. Let’s learn from the some of the masters in the field and do some new mistakes.<div /><br/><p>Before start mentioning about those masters, I would like to thank my colleague “Jijesh Mohan” who has helped a lot and inspired me to start the journey (Now I hope, you will know what is mean by Experience Reuse). Here is the list of Masters.</p></span></div><ul><li><a href="http://blog.objectmentor.com/">Robert C Martin</a></li><li><a href="http://pragdave.pragprog.com/">Dave Thomas</a></li><li><a href="http://martinfowler.com/">Martin Fowler</a></li><li><a href="http://en.wikipedia.org/wiki/Ward_Cunningham">Ward Cunningham</a></li><li><a href="http://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a></li><li><a href="http://en.wikipedia.org/wiki/Grady_Booch">Grady Booch</a></li><li><a href="http://www.joelonsoftware.com/">Joel Spolsky</a></li><li><a href="http://www.catb.org/~esr/">Eric S Raymond</a></li></ul><div>One great thing about all these excellent folks is they share their knowledge, either through Books or through their blogs. We are very fortunate. Now it’s our turn to learn from their wisdom and move forward.</div> <br/><blockquote><p>The man who does not read good books has no advantage over the man who can't read them.</p><footer><strong>Mark Twain</strong></footer></blockquote><div>I have found the following magnificent books in the quest</div><p><ul><li>Pragmatic Programmer – Andrew Hunt, Dave Thomas</li><ul><li>Must Read for every programmer. In my perspective it is the Bible of Programming</li></ul><li>Clean Code – Robert C Martin</li><li>Refactoring – Martin Fowler</li><li>Art of Unix Programming – Eric S Raymond</li></ul></p><div>I’ve read the Pragmatic Programmer and all others are in my “To-Read” list. I am really searching for words in dictionary to describe about “Pragmatic Programmer”. It is a “Gem”.</div><br /><div>When it comes to blogs, we have “Google Reader”. Just subscribe to the blog posts of these eminent people through Google Reader and learn the art of programming.</div><div>The stage has been setup. No one can ride bicycle by reading a book on “How to Ride Bicycle”. What books and blog posts would offer us is knowledge. In addition to knowledge to move further we need another thing called “Practice”. Yes get your hands dirty. Experiment, Research, Critique, Analyse, involve in healthy debates with your colleagues on various aspects of software craftsmanship, work and feel passionate about your work.</div><br/><div>I have pledged myself to follow the best practices in all my development works and no compromise on the quality of the code I write. In nutshell, I am going to care about my craft, think about my work and strive for excellence.</div><br/><div>I am in the very early stage of becoming a better programmer and looking forward to listen to your suggestions and inputs on this. When we grow older, we will be stronger. With all blessings and hope, the journey begins!</div> <br />

]]></content>
  </entry>
  
</feed>

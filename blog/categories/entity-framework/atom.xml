<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Entity Framework | Tamizh's Thoughts]]></title>
  <link href="http://tamizhvendan.github.com/blog/categories/entity-framework/atom.xml" rel="self"/>
  <link href="http://tamizhvendan.github.com/"/>
  <updated>2014-01-11T15:12:39+05:30</updated>
  <id>http://tamizhvendan.github.com/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test Driving Model Validation in ASP.NET MVC3 - Part 2]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/08/17/test-driving-model-validation-in-aspnet_17/"/>
    <updated>2011-08-17T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/08/17/test-driving-model-validation-in-aspnet_17</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
<p style="text-align: justify;">
 In <a href="/blog/2011/08/13/test-driving-model-validation-in-aspnet/">Part-1</a>of this small blog post series, we have explored a way to do the TDD of controller’s responsibility in the context of model validation. In this Part-2 we are going to see <strong>“How to do the TDD of Model Validation”</strong>
</p>

<p style="text-align: justify;">
 Before getting into the business let us have a quick look at how ASP.NET MVC3 does the model validation. Internally when making an Http POST/GET request, MVC3 makes use of a helper class <strong><a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.validator.aspx">Validator</a></strong> located in the namespace <em>System.ComponentModel.DataAnnotations.</em> Validator can be used to validate the models based on the <strong><a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.validationattribute.aspx">ValidationAttribute</a></strong> attributes associate with the model. After validating MVC3 adds the validation results to the controller’s <em>ModelState</em> Property by the <em>AddModelError</em> method which in turn sets the<em> ModelState.IsValid</em> property (Refer <a href="/blog/2011/08/13/test-driving-model-validation-in-aspnet/">Part-1</a>). We are actually going to make use of this <em>Validator</em> helper class going to test drive the model validation. 
</p>

  <h4>Let us start with a small requirement</h4>
<div style="text-align: center;">
 <em>“Employee name should not be empty”</em>
</div>
<br />
 <p>The corresponding unit test will be like as follows</p>
 
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://4.bp.blogspot.com/-3Ql_dP2wJkE/Tku0g78apHI/AAAAAAAAAKw/gV-lTvda50I/s1600/UnitTest1.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="200px" qaa="true" src="http://4.bp.blogspot.com/-3Ql_dP2wJkE/Tku0g78apHI/AAAAAAAAAKw/gV-lTvda50I/s320/UnitTest1.PNG" width="320px" /></a></div>


 <p style="text-align: justify;">ValidateObject Method determines whether the specified object is valid using the validation context and throws a ValidationException if the object is invalid.</p>


 <p>Employee Model will be like as follows</p>
 
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://4.bp.blogspot.com/-URfST5ZPMwo/Tku0gsJJAxI/AAAAAAAAAKs/5K0GYH1ObLs/s1600/Emp1.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" qaa="true" src="http://4.bp.blogspot.com/-URfST5ZPMwo/Tku0gsJJAxI/AAAAAAAAAKs/5K0GYH1ObLs/s1600/Emp1.PNG" /></a></div>

<p style="text-align: justify;">

 When you run the test “EmployeeNameShouldNotBeEmpty”, it will <strong><span style="color: red;">Fail</span></strong> with the error message <em>“System.ComponentModel.DataAnnotations.ValidationException was expected”</em>. Now it’s time to make it <strong><span style="color: #00b050;">Pass. </span></strong>Thanks to <em>RequiredAttribute</em> we can make the test the pass without much effort. Just decorate the Name property with the <em>[Required]</em> Attribute. That’s it. Now run the test and it will <strong><span style="color: #00b050;">Pass.</span></strong> As there is no scope for Refactoring, we will be ignoring it.
</p>

 <p>Well, we have done the TDD of model validation. Now let’s move onto the next requirement. </p>
 <div style="text-align: center;">
 <em>“Employee age should be greater than 30”</em>
</div>
<br />
 <p style="text-align: justify;"> 
 Let’s write the unit test for this requirement.
 </p>
 
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://3.bp.blogspot.com/-cXpXTstCDr4/Tku0hg4cWDI/AAAAAAAAAK0/hahJBKoWOLI/s1600/UnitTest2.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="83px" qaa="true" src="http://3.bp.blogspot.com/-cXpXTstCDr4/Tku0hg4cWDI/AAAAAAAAAK0/hahJBKoWOLI/s320/UnitTest2.PNG" width="320px" /></a></div>
 
 <p>When we run the test, we’d get a failing test with error message “System.ComponentModel.DataAnnotations.ValidationException was expected”</p>

 <p>Like <em>RequiredAttribute</em> we don’t have any AgeLimit Attribute to make the test pass. However we can create such kind of CustomAttributes. Another approach would be making use of <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.ivalidatableobject.aspx"><em>IValiadatableObject</em></a></p>

 <p style="text-align: justify;">I will be using the latter option in this blog post, if you are interested in creating custom attribute refer this <a href="http://www.devtrends.co.uk/blog/the-complete-guide-to-validation-in-asp.net-mvc-3-part-2">blog post</a></p>

 <p>Here we go; the modified Employee model will look like as follows </p>

 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://1.bp.blogspot.com/-zAsuau_JXwA/Tku0iUzEgFI/AAAAAAAAAK4/J1t3gYaECmw/s1600/Emp2.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="119px" qaa="true" src="http://1.bp.blogspot.com/-zAsuau_JXwA/Tku0iUzEgFI/AAAAAAAAAK4/J1t3gYaECmw/s320/Emp2.PNG" width="320px" /></a></div>

 <p>
 The <em>Validator</em> helper class will invoke the Validate method of the model if the model passed to the <em>ValidateObject</em> Method implements the <em>IValidatableObject</em>.</p>

 <p>Hurrah! Now you will be getting a passing test. We have done the TDD of Model Validation. </p>
 <h3>Summary</h3>
 <p>The bottom-line is we should not combine the unit tests of model validation with the controller’s unit tests and both should be kept separate. You can download the source code which we’ve seen in this blog post series from </span><a href="http://www.box.net/shared/73e9m5d2ufyi6pazfq4j"><span style="font-family: Calibri;">here</span></a></p>
 </div>
 </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Driving Model Validation in ASP.NET MVC3 - Part 1]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/08/13/test-driving-model-validation-in-aspnet/"/>
    <updated>2011-08-13T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/08/13/test-driving-model-validation-in-aspnet</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
 <p style="text-align: justify;">
 Entity
 Framework 4.1(EF4.1) provides in-built support for defining the validation
 constraints in model through Data Annotation attributes and Fluent API. It’s
 one of the cool features provided by EF4.1 that enables the developers to define
 validation rules of the model in an easy and more maintainable way. In addition
 to that MVC3 framework makes use of these validation model and supports both
 client and server side validation without writing any code!</p>

 <p style="text-align: justify;">
 I’m
 in the early days of practising Test Driven Development (TDD). Fortunately I
 have got an opportunity to implement TDD in my current assignment. I feel I am
 much oriented and focused towards the solution while using TDD. Also it makes
 me to critique my design and the way I do the coding. I would like to be a
 better programmer and looking forward to improve myself and hence TDD suits me
 more. Learning TDD and practising it is totally different! Yes, in theory it
 is very easy to read and understand TDD. But when you practise it, you will
 encounter many more interesting things about TDD and in fact it’s where you can
 actually learn TDD.</p>

 <p style="text-align: justify;">
 Okay,
 how to do TDD with Controller's responsibility in the context of Model validation in MVC3. Well, it is easy but
 we should understand and find out what exactly we want to test and the way to
 test them. Many articles and blog posts suggest doing it through the controller.
 Is it really a good approach to test the model validation through
 controller?&nbsp;&nbsp; Kindly think of it for a
 moment. I feel it is not a right way to deal this stuff.&nbsp;</p>
 <p style="text-align: justify;">
 Let me explain
 it through a small example. Consider an Employee model which has two
 properties Name and Age&nbsp;and an EmployeeController responsible for doing
 CRUD on Employee Model. What is the responsibility of EmployeeController when creating a new Employee data? It should check whether the posted employee model is valid or not, if it is valid add to the database else return the view with the validation errors. MVC3 framework makes life easy by automatically validating the Posted model and set the <b>IsValid</b> Property of the ModelState and also add validation errors to the model. Hence controller's job is very easy as follows</p>
 <p class="separator" style="clear: both; text-align: center;">
 <a href="http://2.bp.blogspot.com/-gMWdWyjaBxQ/TkYnWEIpWQI/AAAAAAAAAKI/mvc7iTeatok/s1600/Employee.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-gMWdWyjaBxQ/TkYnWEIpWQI/AAAAAAAAAKI/mvc7iTeatok/s1600/Employee.png" /></a></p>

 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://1.bp.blogspot.com/-DSw1qdzt9ZA/TkYYuJLxKGI/AAAAAAAAAJw/5k1AerK1wiE/s1600/EmpControllerResponsibility.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="189" src="http://1.bp.blogspot.com/-DSw1qdzt9ZA/TkYYuJLxKGI/AAAAAAAAAJw/5k1AerK1wiE/s320/EmpControllerResponsibility.png" width="320" /></a></div>
 <h4>Corresponding TestCases</h4>

 <ul>
 <li>When creating a new employee, if the passed employee data is valid, it should be added to the database</li>
 <li>When creating a new employee, if the passsed employee data is InValid, it should not add to the database and show the view with validation errors.</li>
 </ul>
 <br />
 <div style="text-align: justify;">
 The first unit test will be as following:</div>
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://3.bp.blogspot.com/-XEBOUhl7_WM/TkYgBqYX9VI/AAAAAAAAAJ0/wqKLvm_NGnw/s1600/EmpControllerUnitTest1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="161" src="http://3.bp.blogspot.com/-XEBOUhl7_WM/TkYgBqYX9VI/AAAAAAAAAJ0/wqKLvm_NGnw/s320/EmpControllerUnitTest1.png" width="320" /></a></div>
 <div class="separator" style="clear: both; text-align: center;">
 <br /></div>
 <p style="text-align: justify;">
 This unit test makes use of the following fake Database implementation.</p>
 <div style="text-align: justify;">
 <br /></div>
 <p class="separator" style="clear: both; text-align: center;">
 <a href="http://4.bp.blogspot.com/-c1GRZq3f1Ms/TkYiTwN9z4I/AAAAAAAAAJ4/lma-KtsMK6Q/s1600/fakeDatabase.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="136" src="http://4.bp.blogspot.com/-c1GRZq3f1Ms/TkYiTwN9z4I/AAAAAAAAAJ4/lma-KtsMK6Q/s320/fakeDatabase.png" width="320" /></a></p>
 <p style="text-align: justify;">
 To keep this blog post simple, I am not showcasing the TDD steps which I have done here and the EmployeeController Code would be as follows.</p>
 <div style="text-align: justify;">
 <br /></div>
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://1.bp.blogspot.com/-QRcFWLWNsmg/TkYkHGAoWnI/AAAAAAAAAJ8/FEit5wZZWs0/s1600/EmpController.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-QRcFWLWNsmg/TkYkHGAoWnI/AAAAAAAAAJ8/FEit5wZZWs0/s320/EmpController.png" width="315" /></a></div>
 <div class="separator" style="clear: both; text-align: center;">
 <br /></div>
 <p class="separator" style="clear: both; text-align: justify;">
 Employee Controller makes use of an InMemory Database (Simplest option!!) &nbsp;which implements the IRepository interface.&nbsp;</p>
 <div class="separator" style="clear: both; text-align: justify;">
 <br /></div>
 <p class="separator" style="clear: both; text-align: center;">
 <a href="http://1.bp.blogspot.com/-xy_kB-hQk9o/TkYlRVdooZI/AAAAAAAAAKA/nnxYCWTdTLg/s1600/IRepository.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-xy_kB-hQk9o/TkYlRVdooZI/AAAAAAAAAKA/nnxYCWTdTLg/s1600/IRepository.png" /></a></p>
 
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://2.bp.blogspot.com/-yU6djR74NeA/TkYlXKnjBOI/AAAAAAAAAKE/eXcZL2_7qew/s1600/InMemoryDb.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-yU6djR74NeA/TkYlXKnjBOI/AAAAAAAAAKE/eXcZL2_7qew/s1600/InMemoryDb.png" /></a></div>
 <div class="separator" style="clear: both; text-align: center;">
 <br /></div>
 <p class="separator" style="clear: both; text-align: justify;">
 I have done all the wire ups to make the first unit test pass. (Pardon me! For the sake of simplicity of this blog post I've violated TDD rules. Hope you can infer the TDD steps from the coding samples). Its time to &nbsp;move to the next unit test and here comes a bottleneck. &nbsp; &nbsp;</p>

 <p style="text-align: justify;">
 You may wonder what it is that. There comes a feature of ASP.NET MVC 3 framework. During HTTP post action the framework validates the employee model and sets the EmployeeController's Property <em>ModelState.IsValid</em> to true or false. <b>It occurs only during HTTP post. </b>In our unit test code we are actually calling the action methods of the controller and not making any HTTP post. So, the ModalState is always true whenever we call the action methods of a controller from a unit testing code.&nbsp;</p>

 <p style="text-align: justify;">
 In our second test case, we need to setup a controller in such a way that its ModelState property is InValid. We can do this by adding a ModelError to the ModelState property of the EmployeeController. Infact it is what MVC3 framework is doing under the hood when making HTTP post.&nbsp;</p>
 
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://4.bp.blogspot.com/-iVcBB1yZRLI/TkYrDW5JloI/AAAAAAAAAKM/li_PACoQS1E/s1600/EmpControllerUnitTest2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="98" src="http://4.bp.blogspot.com/-iVcBB1yZRLI/TkYrDW5JloI/AAAAAAAAAKM/li_PACoQS1E/s320/EmpControllerUnitTest2.png" width="320" /></a></div>
 <div style="text-align: justify;">
 <br /></div>
 <h4>
 Hurrah! Thats it !!</h4>
 <div style="text-align: justify;">
 <br /></div>
 <p style="text-align: justify;">
 Now we Test drived the controller's responsibility in the context of model validation. In my <a href="/blog/2011/08/17/test-driving-model-validation-in-aspnet_17/">next blog post</a> &nbsp;I'd showcase how to test drive the model validation itself.</p>
 
 </div>
 </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EF Code First 4.1  in Console Application]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/08/04/ef-code-first-41-in-console-application/"/>
    <updated>2011-08-04T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/08/04/ef-code-first-41-in-console-application</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
        <p>Whenever I learn any new things in .Net or experimenting with something, I always prefer to use <em>Console Applications.</em> I personally feel it helps me to concentrate more on what actually I am trying to learn or experiment without any sort of distractions. Moreover it keeps things simple. </p>
    
        <p>I would like to do the same while learning EF Code First 4.1. Though most of articles in web explain EF with respect to ASP.NET MVC, I favor learning it through my own way using console application without creating any controllers and views!!</p>
    
    <h4>Following are the prerequisites to work with EF Code First 4.1</h4>
    <ul>
        <li>
            <a href="http://weblogs.asp.net/scottgu/archive/2011/03/15/visual-studio-2010-sp1.aspx">Visual Studio 2010 SP1</a>
        </li>
        <li>
            <a href="http://blogs.msdn.com/b/adonet/archive/2011/04/11/ef-4-1-released.aspx">Entity Framework 4.1</a>
        </li>
        <li>
            <a href="http://weblogs.asp.net/scottgu/archive/2011/01/11/vs-2010-sp1-and-sql-ce.aspx">SQL CE</a> or SQL Express (SQL CE would be an ideal option for learning purpose)
        </li>
            
    </ul>

    <h4>Show me the Code!</h4>
        <p>After creating a console application project, the initial step would be adding references to the following assemblies.
            <ul>    
                <li>EntityFramework (Version 4.1)</li>
                <li>System.Data.Entity</li>
                <li>System.ComponentModel.DataAnnotations</li>
            </ul>   
        </p>    
        
        <p>Now it’s time to defining the model and the data context. To keep it simple, I am going to define only one model “User”.</p>
            <a href="http://4.bp.blogspot.com/-FxoouXlWKxw/TjqAva1qsWI/AAAAAAAAAJM/5PLCVnNFhDQ/s1600/User.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="260px" src="http://4.bp.blogspot.com/-FxoouXlWKxw/TjqAva1qsWI/AAAAAAAAAJM/5PLCVnNFhDQ/s320/User.PNG" t$="true" width="320px" /></a>
        <p>The data context would be as following.</p>

        <a href="http://3.bp.blogspot.com/-2pLPCQePVKY/TjqAwJ-QD4I/AAAAAAAAAJU/X66hDdCw6eo/s1600/MyDataContext.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="169px" src="http://3.bp.blogspot.com/-2pLPCQePVKY/TjqAwJ-QD4I/AAAAAAAAAJU/X66hDdCw6eo/s320/MyDataContext.PNG" t$="true" width="320px" /></a>
        <p>This basic infrastructure is sufficient to run the console application. However as we are using the data context for learning purpose, we might change the model often and doing so will make it inconsistent with the database created automatically when you run the application for the first time. </p>
        <p> We can circumvent this situation by creating new Data Context initialize class that inherits from <em>DropCreateDatabaseIfModelChanges</em>&lt;TContext&gt; where TContext is the data context that you want to sync with the database always. This class also offers an override function <em>“Seed”</em> using which we can fill the database with some initial data.</p>

        <p>The finished code of DataContext initialize class will be like the following.</p>
        <a href="http://2.bp.blogspot.com/-fFqQJzPBGkY/TjqAwOW4nMI/AAAAAAAAAJY/DDY_VyYQHfI/s1600/MyDataContextInit.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="262px" src="http://2.bp.blogspot.com/-fFqQJzPBGkY/TjqAwOW4nMI/AAAAAAAAAJY/DDY_VyYQHfI/s320/MyDataContextInit.PNG" t$="true" width="320px" /></a>
        <p>This datacontext initialize class would create the database whenever the database model changes and create two users by default. Now it’s time to code our Main method.</p>
        <p>Here we go. Pay close attention to the first statement in the Main method that initializes the database with an instance of DataContextInit class that we have created.</p>
        <a href="http://4.bp.blogspot.com/-jl5r5Sk7m0Q/TjqAvdAJRPI/AAAAAAAAAJQ/elZcjzTNgEE/s1600/EFConsoleApp.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="223px" src="http://4.bp.blogspot.com/-jl5r5Sk7m0Q/TjqAvdAJRPI/AAAAAAAAAJQ/elZcjzTNgEE/s320/EFConsoleApp.PNG" t$="true" width="320px" /></a>
        
        <p>Now you can run the application without any configurations. The default behavior of EF Code First will create the database with the same name as your data context name here “MyDataContext” in the SQL Express server installed in the local machine. If you wish to change this default behavior and wanted to use SQL CE instead of SQL Express just add an App.Config to the project and create a connection string with the name of your data context as follows.</p>

        <a href="http://4.bp.blogspot.com/-YUZyAGX2KyA/TjqAvBuEd4I/AAAAAAAAAJI/p_UjE-K_lR8/s1600/Configuration.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="65px" src="http://4.bp.blogspot.com/-YUZyAGX2KyA/TjqAvBuEd4I/AAAAAAAAAJI/p_UjE-K_lR8/s320/Configuration.PNG" t$="true" width="320px" /></a>

        <p>That’s it. “Ctrl+F5” and here is the output</p>

        <a href="http://3.bp.blogspot.com/-l0IfgWCGZfQ/TjqAwX_8pnI/AAAAAAAAAJc/RLcjASqgaBo/s1600/Output.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="117px" src="http://3.bp.blogspot.com/-l0IfgWCGZfQ/TjqAwX_8pnI/AAAAAAAAAJc/RLcjASqgaBo/s320/Output.PNG" t$="true" width="320px" /></a>

        <h4>Summary</h4>
        <p>In this blog post we have explore the basic foundation on how to work with EF CodeFirst using console application. If you want to get your dirty with EF Code First without any distraction Console Application is a better one. You can download the sample code used in this blog post from <a href="http://www.box.net/shared/s0yu8b4sebp3dh9ru5gb">here.</a>
        </div>
    </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework 4.0 As Class Library - Part 2]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/04/01/entity-framework-40-as-class-library/"/>
    <updated>2011-04-01T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/04/01/entity-framework-40-as-class-library</id>
    <content type="html"><![CDATA[<div class='post'>
<div></a>As the continuation of my previous <a href="/blog/2011/03/25/entity-framework-40-class-library-part/">blog post</a>, In this blog post we are going to explore on how to consume the data access class library created in the previous blog post.<p>Consuming the Data Access Library created using Entity Framework 4.0 involves the following two steps.<br /><ol><li>Adding reference to the class library</li><li>Adding the connection string in the config file (App.config or Web.config)</li></ol>Let us see how can we do these steps using a console application. To keep things simple I have opt for a console application. It holds the same for an ASP.NET , Windows Form, WPF,WCF, etc.</p><h3>Console Application Creation</h3>Create a new console application called "HrdConsoleApp"<br /><a href="http://1.bp.blogspot.com/-jd1uE7HyzUY/TZw4OSKgKVI/AAAAAAAAAFw/O0t-17BazAk/s1600/1.ConsoleAppCreation.PNG" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="221px" src="http://1.bp.blogspot.com/-jd1uE7HyzUY/TZw4OSKgKVI/AAAAAAAAAFw/O0t-17BazAk/s320/1.ConsoleAppCreation.PNG" width="320px" /></a><br /><a href="https://ch1blogs/blogs/211239/files/2011/04/1consoleappcreation.PNG" title="1consoleappcreation.PNG"></a><br /><br /><b>Add a reference to the Class library</b><br /><br />Right click on references and refer the class library "HRD.DataAccess" that we have created in the last blog. <br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-238LBeCcS-8/TZw4UoXoTyI/AAAAAAAAAF0/Z-wMwpTZD1k/s1600/2.ReferenceLibrary.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="267px" src="http://4.bp.blogspot.com/-238LBeCcS-8/TZw4UoXoTyI/AAAAAAAAAF0/Z-wMwpTZD1k/s320/2.ReferenceLibrary.PNG" width="320px" /></a></div><b></b><br /><br />Add reference to System.Data.Entity Library<br /><a href="http://4.bp.blogspot.com/-TIhl2OiTt68/TZw59TQrQ6I/AAAAAAAAAF8/WM5ffjSpETo/s1600/5.DataEntityReference.PNG" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="267px" src="http://4.bp.blogspot.com/-TIhl2OiTt68/TZw59TQrQ6I/AAAAAAAAAF8/WM5ffjSpETo/s320/5.DataEntityReference.PNG" width="320px" /></a><a href="https://ch1blogs/blogs/211239/files/2011/04/5dataentityreference.PNG" title="5dataentityreference.PNG"><br /></a><br /><br />Add the App.Config file to the console application by right clicking on the project name in the solution explorer and select "Add-&gt;New Item". Then Copy the connection string from the App.Config file created in the HrdDataAccess Class library Project created earlier and paste it in the App.config file created in the previous step.<br /><a href="http://2.bp.blogspot.com/-ZqMXJ5KdLy8/TZw4Y1uECQI/AAAAAAAAAF4/fIcRIy1se5c/s1600/3.AppConfigCreation.PNG" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img src="http://2.bp.blogspot.com/-ZqMXJ5KdLy8/TZw4Y1uECQI/AAAAAAAAAF4/fIcRIy1se5c/s320/3.AppConfigCreation.PNG" /></img><br /><p><a href="http://4.bp.blogspot.com/-TIhl2OiTt68/TZw59TQrQ6I/AAAAAAAAAF8/WM5ffjSpETo/s1600/5.DataEntityReference.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"></a></p>
<a href="http://2.bp.blogspot.com/-HgFzRYacpQA/TZw6IqMd5oI/AAAAAAAAAGA/q_IiJsTNYvU/s1600/4.AppConfig.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="http://2.bp.blogspot.com/-HgFzRYacpQA/TZw6IqMd5oI/AAAAAAAAAGA/q_IiJsTNYvU/s320/4.AppConfig.PNG"/></a><a href="http://2.bp.blogspot.com/-ZqMXJ5KdLy8/TZw4Y1uECQI/AAAAAAAAAF4/fIcRIy1se5c/s1600/3.AppConfigCreation.PNG" imageanchor="1"></a><p>Thats all now it is all set to access the database with only minimal amount of code.. Here we go!!</p><br /><h3>Code Please!</h3>
<br />
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">HRD.DataAccess</span><span class="p">;</span>
</span><span class='line'><span class="k">namespace</span> <span class="nn">HrdConsoleApp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">hrdEntities</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HRDEntities</span><span class="p">();</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span> <span class="k">in</span> <span class="n">hrdEntities</span><span class="p">.</span><span class="n">Employees</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Name: &quot;</span> <span class="p">+</span> <span class="n">employee</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Department: &quot;</span> <span class="p">+</span> <span class="n">employee</span><span class="p">.</span><span class="n">Department</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;########################&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

    <br /><b>Output</b> <br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-Fooy-W2-OCQ/TZw6M7tVqTI/AAAAAAAAAGE/tJ5UYVi5LRI/s1600/6.Output.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="161px" src="http://1.bp.blogspot.com/-Fooy-W2-OCQ/TZw6M7tVqTI/AAAAAAAAAGE/tJ5UYVi5LRI/s320/6.Output.PNG" width="320px" /></a></div><a href="https://ch1blogs/blogs/211239/files/2011/04/6output.PNG" title="6output.PNG"><br /></a><br /><br /><b>Summary:</b><br /><br />In this blog series (Part 1 and Part 2) we have seen how to create the data access layer using Entity Framework 4.0 as class library and how to consume it in an application. With the introduction of Entity Framework developing the code for data access layer is no longer a tidy and time consuming job!!</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework 4.0 - Class library - Part 1]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/03/25/entity-framework-40-class-library-part/"/>
    <updated>2011-03-25T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/03/25/entity-framework-40-class-library-part</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
    <p>In this blog post we are going to explore how to create the data access layer as aclass library using Entity Framework 4.0. By defining the data access layer asclass library, you can reuse it across many applications just by adding areference to the class library. In my next blog post, we'll explore how to consumethe library in an application. </p>
    <p>Entity Framework 4.0 enables the developer toconcentrate on the business logic and business objects without bothering how ithas been manipulated at the database level. You can find a very good tutorial onEntity Framework <a href="http://www.dotnetcurry.com/ShowArticle.aspx?ID=599">here</a> to get started.This blog post uses a sample database named "HRD" which has two tables, Employee and Department. </p>
    <h4>Step 1: Create a Class Library</h4>Create a new class library project with the name "HRD.DataAccess" and click "Ok". After creating a new project delete the "Class1.cs" which is created by default.<a href="http://4.bp.blogspot.com/-XMny1Q1pWmY/TYyhEuzjS9I/AAAAAAAAAEo/nkXolA-lVW4/s1600/1.Class-Library-Creation.PNG" onblur="function anonymous() { try {parent.deselectBloggerImageGracefully();} catch(e) {} }"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5588018340315745234" src="http://4.bp.blogspot.com/-XMny1Q1pWmY/TYyhEuzjS9I/AAAAAAAAAEo/nkXolA-lVW4/s400/1.Class-Library-Creation.PNG"/></a>
    <h4>Step 2: Create the Entity class using the entity framework</h4> <p>Right click on the project name "HRD.DataAccess" and select "Add -&gt; New item".Select "Data" under installed templates and then select "ADO.NET Data Entity Model". Type the name as "HrdModel.edmx" and click "Add". </p> <a href="http://2.bp.blogspot.com/-41YJhQQtdnI/TYyhbxZQhiI/AAAAAAAAAEw/_fsYr5hRBxg/s1600/2.%2BEdmx-File-Creation.PNG" onblur="function anonymous() { try {parent.deselectBloggerImageGracefully();} catch(e) {} }"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5588018736147760674" src="http://2.bp.blogspot.com/-41YJhQQtdnI/TYyhbxZQhiI/AAAAAAAAAEw/_fsYr5hRBxg/s400/2.%2BEdmx-File-Creation.PNG" /> </a> <p>In the Entity Data Model Wizard select "Generate from database" and click "Next"<a href="http://1.bp.blogspot.com/-3qYGN6L6-w0/TYyhjWJFO4I/AAAAAAAAAE4/UKHqzYE3ZAc/s1600/3.%2BEntity%2BData%2BModel%2BWizard.PNG" onblur="function anonymous() { try {parent.deselectBloggerImageGracefully();} catch(e) {} }"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5588018866271107970" src="http://1.bp.blogspot.com/-3qYGN6L6-w0/TYyhjWJFO4I/AAAAAAAAAE4/UKHqzYE3ZAc/s400/3.%2BEntity%2BData%2BModel%2BWizard.PNG"/></a></p>In the next step select the database name "PCName\sqlexpress.HRD.dbo" and select "Next"<a href="http://1.bp.blogspot.com/-4IToYmLAwxs/TYyiWHk6YhI/AAAAAAAAAFY/H9DSizx7ah8/s1600/4.%2BEntity%2BData%2BModel%2BWizard-DatabaseSelection.PNG"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5588019738534634002" src="http://1.bp.blogspot.com/-4IToYmLAwxs/TYyiWHk6YhI/AAAAAAAAAFY/H9DSizx7ah8/s400/4.%2BEntity%2BData%2BModel%2BWizard-DatabaseSelection.PNG"/></a>
    <p>In the next step select the tables names "Department" &amp; "Employee" and click "Finish"<a href="http://4.bp.blogspot.com/-P0ACj8TAGs8/TYyiZdQ0ZjI/AAAAAAAAAFg/PxaLeJ3UAHM/s1600/5.%2BEntity%2BData%2BModel%2BWizard-TableSelection.PNG"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5588019795895543346" src="http://4.bp.blogspot.com/-P0ACj8TAGs8/TYyiZdQ0ZjI/AAAAAAAAAFg/PxaLeJ3UAHM/s400/5.%2BEntity%2BData%2BModel%2BWizard-TableSelection.PNG" /></a> </p> Now we have created the entity model which represent the Object/Relation mapping<a href="http://4.bp.blogspot.com/-_yfxEzDJo8A/TYyib8Z-pdI/AAAAAAAAAFo/C5m-5SqD4Io/s1600/6.%2BEDMX%2BSuccessful%2BCreation.PNG"><img alt="" border="0" id="BLOGGER_PHOTO_ID_5588019838615201234" src="http://4.bp.blogspot.com/-_yfxEzDJo8A/TYyib8Z-pdI/AAAAAAAAAFo/C5m-5SqD4Io/s400/6.%2BEDMX%2BSuccessful%2BCreation.PNG" style="cursor: pointer; height: 289px; width: 400px;" /></a> <h4>Step 3: Building the class library</h4><ol><li>Select "Build-&gt;Configuration Manager"</li><li>Change the Configuration of the Project "HRD.DataAccess" to "Release". By default it is "Debug"</li><li>Click "Close"</li><li>Select "Build-&gt;Build HRD.DataAccess"</li></ol>Thats it!!. Now we have the DataAccess Library ready!! We can reuse it across different .Net Applications 
    <p>
    <h4>Summary</h4>In this blog we have explored the way of creating the DataAccess class library using entity framework.in my next blog, we'd explore on how to consume the data access library in an application. 
</h4>
</div></div>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ASP.NET MVC | Tamizh's Thoughts]]></title>
  <link href="http://tamizhvendan.github.com/blog/categories/asp-dot-net-mvc/atom.xml" rel="self"/>
  <link href="http://tamizhvendan.github.com/"/>
  <updated>2013-08-08T16:24:18+05:30</updated>
  <id>http://tamizhvendan.github.com/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing Custom Model Binders in MVC3]]></title>
    <link href="http://tamizhvendan.github.com/blog/2012/02/11/unit-testing-custom-model-binders-in/"/>
    <updated>2012-02-11T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2012/02/11/unit-testing-custom-model-binders-in</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">&nbsp;In <a href="http://sweettam.blogspot.in/2012/02/unit-testing-with-sessions-in-aspnet.html">my previous post</a> we have seen a way to do unit testing with Sessions in MVC3 using Custom model binders. In this blog post we are going to see how to do unit test the model binder itself.<br />One remarkable thing which everybody hails in MVC3 is its extensibility and its testability. You can extend/customize the components in the framework and also you can unit test them with ease.<br />Before getting into unit testing the custom model binder, Lets have a closer look at the <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.imodelbinder.bindmodel.aspx">BindModel</a> method<br /><br /><a href="http://lh3.ggpht.com/-FYDs3Mj_C6Q/TzX3DB51lCI/AAAAAAAAARU/Sg3jlORHi-4/s1600-h/image%25255B11%25255D.png"><img alt="image" border="0" height="333" src="http://lh5.ggpht.com/-w7ARZ_zbZbo/TzX3I1rgogI/AAAAAAAAARc/NXOGcGRY1JI/image_thumb%25255B7%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="636" /></a><br /><br />In the BindModel method we are making use of Session property in the HttpContext object which is in turn a property of the <a href="http://msdn.microsoft.com/en-us/library/dd492673.aspx">ControllerContext</a> object that is passed to the BindModel method as a parameter by the MVC3 framework. In order to unit test this method we need to have to control over the HttpContext property of the ControllerContext and the Session property of the HttpContext.<br /><br />How to get control over those properties ? Thanks to <a href="http://msdn.microsoft.com/en-us/library/dd460098.aspx">a constructor of ControllerContext</a><br /><br /><a href="http://lh5.ggpht.com/-ixI6lEdO86k/TzX3KkjVicI/AAAAAAAAARk/BlDxNVgK5pQ/s1600-h/image%25255B15%25255D.png"><img alt="image" border="0" height="79" src="http://lh4.ggpht.com/-VrPS_TC8zSE/TzX3NHFidkI/AAAAAAAAARs/zeEwGeOcc8g/image_thumb%25255B9%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="327" /></a><br /><br />ControllerContext uses the constructor dependency injection to get rid of the direct dependency on <a href="http://msdn.microsoft.com/en-us/library/system.web.httpcontextbase.aspx">HttpContextBase</a> and we are going to exploit this to do unit testing. Using a mocking framework we can easily create a mock of HttpContetBase and drive the unit test. <br /><br />The Session property of the HttpContextBase is of type <a href="http://msdn.microsoft.com/en-us/library/system.web.httpsessionstatebase.aspx">HttpSessionStateBase</a> which can also be mocked. <br />Here is the complete implementation of Test fixture class which unit test the CartModelBinder class that we have seen in the <a href="http://sweettam.blogspot.in/2012/02/unit-testing-with-sessions-in-aspnet.html">previous post</a> using the mocking library <a href="http://code.google.com/p/moq/">Moq</a>.<br /><br /><a href="http://lh4.ggpht.com/-X54hSC4cWCQ/TzX3Ptdoa7I/AAAAAAAAAR0/BkZTHYKOleg/s1600-h/CartModelBinderTests%25255B5%25255D.png"><img alt="CartModelBinderTests" border="0" height="732" src="http://lh4.ggpht.com/-O37KzgpVM5A/TzX3Tm7QXqI/AAAAAAAAAR8/7T6_b2_G6kA/CartModelBinderTests_thumb%25255B3%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="CartModelBinderTests" width="640" /></a><br /><br />I hope the test code is self-explanatory. </div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC3 Ajax Part II - Adding Animation to Action Link]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/06/26/ajax-mvc3-ajax-part-ii-adding-animation/"/>
    <updated>2011-06-26T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/06/26/ajax-mvc3-ajax-part-ii-adding-animation</id>
    <content type="html"><![CDATA[<div class='post'>
<div><p>This blog post is the continuation of my <a href="{% post_url 2011-06-24-aspnet-mvc-3-ajax-part-i %}">previous blog post</a>. In the last blog post we have seen how to achieve the basic Ajax functionality using <em>Ajax.ActionLink()</em> helper method. Probably in many websites you might have seen whenever any ajax request is raised by the user, there would be an associated loading text or a loading gif will be displayed which inform the user that something is going on the background. We are now going to see how to achieve the same using the <em>ActionLink()</em> method.</p>
    <p>
    <em>ActionLink()</em> method uses a&nbsp;declarative approach to do this. All we need to do is to create a div element contains the element which will be displayed during the Ajax request and associate the div element to the <em>ActionLink()</em> method by assigning the "<em>LoadingElementId</em>" AjaxOption to the div element's id. Let us see how to do this by using the MVC3 app that we have seen in the <a href="{% post_url 2011-06-24-aspnet-mvc-3-ajax-part-i %}">previous blog post</a>.</p>
    <h3>Adding Loading Div Element</h3>
    Open "Index.cshtml" and append the following div. It just contains image element which will be displayed during ajax request.
{% codeblock lang:html %}
<div id="divLoading" style="display:none">
    <img src="../../Content/images/loading.gif" />
</div>
{% endcodeblock %}
    <p>Note the inline style. The display has been set to none as it not intended to display only during Ajax request. </p>
    <h3>Associate Div Element with <em>ActionLink()</em> method</h3>
    <p>This is very simple. We just need to add the AjaxOption "<em>LoadingElementId</em>" and assign it to the loading div element's id. The modified <em>ActionLink()</em> method will look as follows.</p><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-6NlSqFH_RBU/TgbDPO7tB_I/AAAAAAAAAHc/BEEQT3XEWmQ/s1600/ActionLink+Method.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="http://1.bp.blogspot.com/-6NlSqFH_RBU/TgbDPO7tB_I/AAAAAAAAAHc/BEEQT3XEWmQ/s320/ActionLink+Method.png" /></a></div><br />
    <h3>Simulating a delay in Action Method</h3><p>Now when we run the application we might not get a chance to see the loading gif as everything takes place is very less time. In order to see the loading gif, we need to increase the processing time taken by the GreetMe action method. The modified GreetMe action method in <em>HomeController.cs</em> will look as follows. The delay has been introduced by using the <em>Thread.Sleep()</em> method which delay the process by 2 seconds. </p>
    {% codeblock lang:csharp %}
public string GreetMe() 
{
  System.Threading.Thread.Sleep(2000);
  return "Hello ASP.NET MVC3 Ajax !!";
}
{% endcodeblock %}
    <br />Now when we run the application we will be able to see the loading gif when the Greet Me link is clicked.
    <h3>Summary</h3>In the Part i &amp; ii of this series we have seen a basic Ajax functionality using <em>Ajax.ActionLink()</em> method. The source code of the demo application can be downloaded from <a href="http://www.box.net/shared/zmn84rj31g2kdx19flxq">here</a>.</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC 3 Ajax - Part I]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/06/24/aspnet-mvc-3-ajax-part-i/"/>
    <updated>2011-06-24T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/06/24/aspnet-mvc-3-ajax-part-i</id>
    <content type="html"><![CDATA[<div class='post'>
<div>In this blog series ASP.NET MVC3 Ajax we are going to explore about implementing Ajax features in ASP.NET MVC3 Web application and this blog post will cover the basics of ASP.NET MVC3 Ajax.<p>MVC3 makes use of <a href="http://en.wikipedia.org/wiki/Unobtrusive_JavaScript">Unobtrusive javascript</a> which results a clear and clean seperation between the functionality and the View/Presention of the webpage. We can introduce Ajax features to the MVC3 application using two ways.</p><ol><li><h5>Ajax Helper Methods</h5> - Enable us to achieve Ajax without writing no/less javascript</li><li><h5>jQuery Ajax</h5> - We need to write the code using javascript and jQuery ajax</li></ol><p>Ajax Helper Methods are very simple and intutive to get start with. So, I'll be covering the Ajax Helper Methods and will cover the jQuery Ajax in the future posts of this blog series.</p><h4>Ajax Helper Methods</h4>It enables us to implement ajax feature without writing much code. <i>Ajax.ActionLink()</i> is one of the fundamental Ajax helper method that returns a anchor element (&lt;a&gt;&lt;/a&gt;) with the URL of the action method; When the action link is clicked, the action method in the specified URL is invoked asynchronously and result is sent back to the client. Let us see it in detail by using sample demo application.<ul><li>Create a new ASP.NET MVC3 Project "AjaxGettingStarted" </li><li>Select "<b>Empty</b>" template and "<b>Razor</b>" as view engine and click "<b>Ok</b>"</li><li>ASP.NET MVC3 project template shipped with the <b>scripts folder </b>which contains the all the jQuery library files that are required for doing Ajax and other client side functionalities. To implement ajax we should use the references of "jQuery" and "jQuery.unobtrusive-ajax" minified js files in our view<div><a href="http://4.bp.blogspot.com/-cYTipiOz2uQ/TgR_YKzsliI/AAAAAAAAAHU/R8X1FQYpAfM/s1600/2.+Scripts+Folder.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320px" i$="true" src="http://4.bp.blogspot.com/-cYTipiOz2uQ/TgR_YKzsliI/AAAAAAAAAHU/R8X1FQYpAfM/s320/2.+Scripts+Folder.PNG" width="232px" /></a></div></li><a href="https://ch1blogs/blogs/211239/files/2011/06/2-scripts-folder.PNG" title="2-scripts-folder.PNG"></a>&nbsp;</li><li>Create a Controller with the name <em>HomeController</em> by right clicking the "Controllers" folder and select "Add" -&gt; "Controller"</li><li>The HomeController.cs file will be created under controllers folder with the following code.
{% codeblock lang:csharp %}
public class HomeController : Controller    
{        
    public ActionResult Index()
    {             
        return View();
    }
}
{% endcodeblock %}
</li><li>Then right click inside the Index() Action Method and select "Add View". Leave the default setting and click "Add".</li><li>This would create the view "Index.cshtml" under the folder "Views/Home".</li><li>Add the following action method in HomeController.cs file
{% codeblock lang:csharp %}
public string GreetMe()
{
    return "Hello ASP.NET MVC3 Ajax!!";
}
{% endcodeblock %}
This action method will be called asychronously called using Ajax.ActionLink helper method. This just written a string which will be displayed in the view via Ajax. </li></ul><ul><li>Add the script reference to the "jQuery" and "jQuery.unobtrusive-ajax" minified js files in Index.cshtml file.</li>
{% codeblock lang:html %}
<script src="@Url.Content("~/Scripts/jquery-1.5.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.js")" type="text/javascript"></script>
{% endcodeblock %}
<li><p>Now all the setup in place to implement the basic Ajax functionality using Ajax.ActionLink Helper method. Before seeing this method in action let me explain bit more about this method. There are 12 overloads for this method amoung which the simplest one is </p> <em>Ajax.ActionLink(string linkText, string actionName, AjaxOptions ajaxOptions)</em> <p>The first parameter is the Link text which will be displayed in the view, the second parameter is the name of the action method which should be invoked while clicking the action link and the third parameter is AjaxOptions which defines how the Ajax request/response will take place and used to tell MVC exactly what you want your Ajax call to do.</p></li></ul><ul><li>AjaxOptions class will have the following properties
<ol><li>Confirm - Gets or sets the message to display in a confirmation window before a request is submitted.</li><li>HttpMethod - Gets or sets the HTTP request method ("Get" or "Post").</li>
    <li>InsertionMode - Gets or sets the mode that specifies how to insert the response into the target DOM element</li><li>LoadingElementId - Gets or sets the id attribute of an HTML element that is displayed while the Ajax function is loading.</li><li>OnBegin - Gets or sets the name of the JavaScript function to call immediately before the page is updated. </li><li>OnComplete - Gets or sets the JavaScript function to call when response data has been instantiated but before the page is updated. </li><li>OnError - Gets or sets the JavaScript function to call if the page update fails.</li><li>OnSuccess - Gets or sets the JavaScript function to call after the page is successfully updated.</li><li>UpdateTargetId - Gets or sets the ID of the DOM element to update by using the response from the server.</li><li>URL - Gets or sets the URL to make the request to.</li></ol></li></ul><ul><li>In our sample demo application we are just going to have a link called "Greet Me". Upon clicking on that click we are going make Ajax request to GreetMe action method and populate a div tag with the value returned by the action method</li><li>Add the following code in the index.cshtml file. which implements the above step.
    {% codeblock %}
<div id="divGreetings">
    @Ajax.ActionLink("Greet Me", "GreetMe", 
        new AjaxOptions() {
            UpdateTargetId="divGreetings", 
            HttpMethod="GET"                    
        }
    )
</div>
    {% endcodeblock %}
    This ActionLink method call just creates an Ajax action link with the text "Greet Me", upon clicking the link it invoke the "GreetMe" action method name which we already defined in the HomeController with the ajax option "HttpGetRequest" and update the Dom element with id "divGreetings" with the results that we are getting from the GreetMe action method, which is a simple string "Hello ASP.NET MVC3 Ajax!!"</li></ul><div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-X90DCHXAEQQ/TgWJkXaXijI/AAAAAAAAAHY/pKzrPDNWNF4/s1600/3-output.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="102" src="http://3.bp.blogspot.com/-X90DCHXAEQQ/TgWJkXaXijI/AAAAAAAAAHY/pKzrPDNWNF4/s320/3-output.PNG" width="320" /></a></div><a href="https://ch1blogs/blogs/211239/files/2011/06/3-output.PNG" title="3-output.PNG"></a> </div>
    <strong>Summary</strong><p>In this blog post we have implemented a basic ajax feature using Ajax.ActionLink helper method. In the <a href="{% post_url 2011-06-26-ajax-mvc3-ajax-part-ii-adding-animation %}"> next blog post </a> of the series we would see how to add some add interative animation during the ajax request.</p>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unit Testing | Tamizh's Thoughts]]></title>
  <link href="http://tamizhvendan.github.com/blog/categories/unit-testing/atom.xml" rel="self"/>
  <link href="http://tamizhvendan.github.com/"/>
  <updated>2013-08-08T16:24:18+05:30</updated>
  <id>http://tamizhvendan.github.com/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing Custom Model Binders in MVC3]]></title>
    <link href="http://tamizhvendan.github.com/blog/2012/02/11/unit-testing-custom-model-binders-in/"/>
    <updated>2012-02-11T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2012/02/11/unit-testing-custom-model-binders-in</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">&nbsp;In <a href="http://sweettam.blogspot.in/2012/02/unit-testing-with-sessions-in-aspnet.html">my previous post</a> we have seen a way to do unit testing with Sessions in MVC3 using Custom model binders. In this blog post we are going to see how to do unit test the model binder itself.<br />One remarkable thing which everybody hails in MVC3 is its extensibility and its testability. You can extend/customize the components in the framework and also you can unit test them with ease.<br />Before getting into unit testing the custom model binder, Lets have a closer look at the <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.imodelbinder.bindmodel.aspx">BindModel</a> method<br /><br /><a href="http://lh3.ggpht.com/-FYDs3Mj_C6Q/TzX3DB51lCI/AAAAAAAAARU/Sg3jlORHi-4/s1600-h/image%25255B11%25255D.png"><img alt="image" border="0" height="333" src="http://lh5.ggpht.com/-w7ARZ_zbZbo/TzX3I1rgogI/AAAAAAAAARc/NXOGcGRY1JI/image_thumb%25255B7%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="636" /></a><br /><br />In the BindModel method we are making use of Session property in the HttpContext object which is in turn a property of the <a href="http://msdn.microsoft.com/en-us/library/dd492673.aspx">ControllerContext</a> object that is passed to the BindModel method as a parameter by the MVC3 framework. In order to unit test this method we need to have to control over the HttpContext property of the ControllerContext and the Session property of the HttpContext.<br /><br />How to get control over those properties ? Thanks to <a href="http://msdn.microsoft.com/en-us/library/dd460098.aspx">a constructor of ControllerContext</a><br /><br /><a href="http://lh5.ggpht.com/-ixI6lEdO86k/TzX3KkjVicI/AAAAAAAAARk/BlDxNVgK5pQ/s1600-h/image%25255B15%25255D.png"><img alt="image" border="0" height="79" src="http://lh4.ggpht.com/-VrPS_TC8zSE/TzX3NHFidkI/AAAAAAAAARs/zeEwGeOcc8g/image_thumb%25255B9%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="327" /></a><br /><br />ControllerContext uses the constructor dependency injection to get rid of the direct dependency on <a href="http://msdn.microsoft.com/en-us/library/system.web.httpcontextbase.aspx">HttpContextBase</a> and we are going to exploit this to do unit testing. Using a mocking framework we can easily create a mock of HttpContetBase and drive the unit test. <br /><br />The Session property of the HttpContextBase is of type <a href="http://msdn.microsoft.com/en-us/library/system.web.httpsessionstatebase.aspx">HttpSessionStateBase</a> which can also be mocked. <br />Here is the complete implementation of Test fixture class which unit test the CartModelBinder class that we have seen in the <a href="http://sweettam.blogspot.in/2012/02/unit-testing-with-sessions-in-aspnet.html">previous post</a> using the mocking library <a href="http://code.google.com/p/moq/">Moq</a>.<br /><br /><a href="http://lh4.ggpht.com/-X54hSC4cWCQ/TzX3Ptdoa7I/AAAAAAAAAR0/BkZTHYKOleg/s1600-h/CartModelBinderTests%25255B5%25255D.png"><img alt="CartModelBinderTests" border="0" height="732" src="http://lh4.ggpht.com/-O37KzgpVM5A/TzX3Tm7QXqI/AAAAAAAAAR8/7T6_b2_G6kA/CartModelBinderTests_thumb%25255B3%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="CartModelBinderTests" width="640" /></a><br /><br />I hope the test code is self-explanatory. </div></div>

]]></content>
  </entry>
  
</feed>

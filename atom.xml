<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tamizh's Thoughts]]></title>
  <link href="http://tamizhvendan.github.com/atom.xml" rel="self"/>
  <link href="http://tamizhvendan.github.com/"/>
  <updated>2013-07-19T15:25:30+05:30</updated>
  <id>http://tamizhvendan.github.com/</id>
  <author>
    <name><![CDATA[Tamizhvendan S]]></name>
    <email><![CDATA[tamizh88@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A hybrid application using ASP.NET MVC3 and Node.js]]></title>
    <link href="http://tamizhvendan.github.com/blog/2012/06/01/hybrid-application-using-aspnet-mvc3/"/>
    <updated>2012-06-01T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2012/06/01/hybrid-application-using-aspnet-mvc3</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">Each and every technology has its pros and cons and there is <a href="http://people.eecs.ku.edu/~saiedian/Teaching/Sp08/816/Papers/Background-Papers/no-silver-bullet.pdf">no silver bullet!</a><br /><br />If you would ask me what you have learnt in your profession so far, I would say the above line as the first one. One technology / platform / language is good at solving one kind of problems and bad at solving other kind of problems. The key is leveraging existing <em>platforms</em> with <em>languages</em> targeted at specific problems and applications to solve the business problems in hand.<br /><br />Three months ago I have come across <a href="http://www.infoq.com/presentations/10-Ways-to-Better-Code-Neal-Ford">an excellent presentation</a> from Neil Ford “10 ways to improve your code”. As a 8th way he talks about “Polyglot Programming”. Its about picking the right tool to do the right job. I am inspired by this presentation and started exploring the “right tools”.<br /><br />In the pursuit of “Right tools”, I’ve come across the young awesome framework <a href="http://nodejs.org/">node.js</a> which is really cool and perfect for real-time applications. On the other hand frameworks like <a href="http://www.asp.net/mvc">ASP.NET MVC3</a> is not meant for creating real-time applications and they address different set of other problems. <br /><br />In this blog post, I going to share my recent exploration on leveraging node.js in an ASP.NET MVC3 application using a “Chat” feature. Though we can achieve it using <a href="http://signalr.net/">SignalR</a>, I’ve preferred node.js as it is a right tool for the chat feature IMO also I wanted to get my hands dirty in creating a hybrid application.<br /><strong><br /></strong><br /><strong>The Node.js Part</strong><br /><br /><a href="http://lh5.ggpht.com/-HLh-ldizDJ0/T8kHC3Ao5_I/AAAAAAAAAZA/vI0DypFIKh8/s1600-h/image%25255B4%25255D.png"><img alt="image" border="0" height="450" src="http://lh6.ggpht.com/-rcbRWOlpeBc/T8kHHp32UJI/AAAAAAAAAZI/ypOCgUHMrN0/image_thumb%25255B2%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="589" /></a><br /><br />The chat server that we are going to use in the MVC3 application has been created using <a href="http://socket.io/">socket.io</a> which makes web-socket programming insanely easy!<br />Its listen for three events<br /><ul><li><em>join</em> – It will be triggered when a new user joined the chat and it broadcast the user name to all the connected users  </li><li><em>message</em> – It willed be triggered when an user send a message in the chat application and broadcast it to the other users  </li><li><em>disconnect</em>– It willed be triggered when an user closes the chat or closes the browser </li></ul>That’s it bang!<br /><strong><br /></strong><br /><strong>The ASP.NET MVC3 side</strong><br /><br /><a href="http://lh6.ggpht.com/-pQEJCXkjOuw/T8kHJFR0zVI/AAAAAAAAAZQ/FTqswQ8XvtY/s1600-h/image%25255B9%25255D.png"><img alt="image" border="0" height="197" src="http://lh6.ggpht.com/-TMmsX9z4rRc/T8kHLTRTuYI/AAAAAAAAAZY/MQurv3YzYIw/image_thumb%25255B5%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="387" /></a><br /><br />The controller side of Chat just renders the “Index view”. The index view has the following javascript code, and it completes the client side part of the chat application<br /><br /><a href="http://lh5.ggpht.com/-QnLwJvxMIR8/T8kHMoTx1qI/AAAAAAAAAZg/VYhVayPULm4/s1600-h/image%25255B14%25255D.png"><img alt="image" border="0" height="403" src="http://lh5.ggpht.com/-XxmqzAqX1i8/T8kHQ1J07tI/AAAAAAAAAZo/sMw8RevtD9k/image_thumb%25255B8%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="530" /></a><br /><strong><br /></strong><br /><strong>Chat feature in Action</strong><br /><br /><a href="http://lh3.ggpht.com/-OoM7_UDFHzQ/T8kHSZP8R8I/AAAAAAAAAZw/QcXNptcqe1I/s1600-h/image%25255B17%25255D.png"><img alt="image" border="0" height="140" src="http://lh5.ggpht.com/-B4IkFTFavZI/T8kHVZP234I/AAAAAAAAAZ4/IGC3r-10yBA/image_thumb%25255B9%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; margin: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="244" /></a><a href="http://lh3.ggpht.com/-xWwrw06nVTk/T8kHW9r2X1I/AAAAAAAAAaA/-g8XAZDm-Qg/s1600-h/image%25255B21%25255D.png"><img alt="image" border="0" height="217" src="http://lh3.ggpht.com/-F7UPYcQXT14/T8kHZfq0W8I/AAAAAAAAAaI/hLP9g4s8QGA/image_thumb%25255B11%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="288" /></a><br /><a href="http://lh6.ggpht.com/-OI01pFQYBEs/T8kHaT3_bmI/AAAAAAAAAaQ/GM-QdsQzTVU/s1600-h/image%25255B25%25255D.png"><img alt="image" border="0" height="202" src="http://lh4.ggpht.com/-VIPYKbYG-rs/T8kHbgnYkBI/AAAAAAAAAaY/24TJhDEHqA8/image_thumb%25255B13%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="318" /></a><br /><a href="http://lh6.ggpht.com/-_jFs2OzmBx0/T8kHczZpZBI/AAAAAAAAAag/-FMnxb_cD9w/s1600-h/image%25255B29%25255D.png"><img alt="image" border="0" height="209" src="http://lh4.ggpht.com/-KwvpW47kGxI/T8kHeUKp3BI/AAAAAAAAAao/GP4naqkNkvc/image_thumb%25255B15%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="321" /></a><br /><a href="http://lh4.ggpht.com/-YNLo_UVoZf0/T8kHfwe76BI/AAAAAAAAAaw/dq8JfcSfYRE/s1600-h/image%25255B33%25255D.png"><img alt="image" border="0" height="209" src="http://lh3.ggpht.com/-tcpQUHyW58I/T8kHhrerqxI/AAAAAAAAAa4/ZEJOJK8swnk/image_thumb%25255B17%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="317" /></a><br /><div align="center"><a href="http://lh6.ggpht.com/-j4AUmiQEA5k/T8kHioICVWI/AAAAAAAAAbA/ZAuJNXh4oZ4/s1600-h/image%25255B37%25255D.png"><img alt="image" border="0" height="190" src="http://lh3.ggpht.com/-KoM6ka9qFxc/T8kHkUP0AGI/AAAAAAAAAbI/ZuGQ-d8KKS8/image_thumb%25255B19%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="329" /></a></div><strong><br /></strong><br /><strong>Summary</strong><br /><br />The objective behind this blog post is just to share the knowledge that I’ve gained in my recent exploration and its just a proof of concept of how to leverage node.js in an MVC3 application. The bottom-line is “Identify and pick the right tool to do the right job”. If you want to play with the source code, don’t forget to clone <a href="https://github.com/tamizhvendan/a-hybrid-app">the repository in my git-hub page</a>.&nbsp;&nbsp; </div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jade Visualizer using Node.js and Socket.io]]></title>
    <link href="http://tamizhvendan.github.com/blog/2012/05/19/jade-visualizer-using-nodejs-and/"/>
    <updated>2012-05-19T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2012/05/19/jade-visualizer-using-nodejs-and</id>
    <content type="html"><![CDATA[<div class='post'>
<p><strong>Hurrah! Finally I made it</strong></p> <blockquote> <p><em>“None of my inventions came by accident. I see a worthwhile need to be met and I make trial after trial until it comes. What it boils down to is one per cent inspiration and ninety-nine per cent perspiration”&nbsp; - Thomas Alva Edison</em></p></blockquote> <p>Today I’m very glad and excited to announce my little contribution to the open source community called <a href="http://jade-visualizer.herokuapp.com/">“Jade-Visualizer”</a> a web-based visualizer/translator which targets the beginners of <a href="http://jade-lang.com/">Jade</a> (A widely used <a href="http://nodejs.org">Node.js</a> view engine) to learn it effectively. </p> <p>Its the inspiration from good bloggers, kindled me to <a href="http://sweettam.blogspot.com/2011/01/thank-god.html">start writing</a> blogs and Its the inspiration from many people who are all contributing to the open source community, encouraged me to kick start my contribution through this tiny web-app. This is my first step towards a great journey of more than 1000 miles and I hope it would lay a firm foundation.</p> <p><strong>What is Jade?</strong></p> <p><a href="https://github.com/visionmedia/jade#readme">Jade</a> is a high performance template engine for Node.js and the default rendering engine for the <a href="http://expressjs.com/">express</a> framework. If you are from the ASP.NET MVC background (like me), its similar to <a href="http://www.asp.net/mvc/videos/mvc-3/mvc-3-razor-view-engine">Razor</a> view engine. Unlike razor, Jade is less verbose and easier to read.</p> <p><strong>Why Jade-Visualizer ?</strong></p> <p><a href="http://www.w3schools.com/">W3schools</a> is my starting point and reference when it comes to basics of web development. I have learned and toyed with JavaScript, html, css in my early days using the “<a href="http://www.w3schools.com/css/tryit.asp?filename=trycss_default">Try it yourself</a>” feature available in their website. It is very intuitive to use and we can learn effectively by actually getting our hands dirty. Also, the immediate output of what we do would certainly help us (helped me!) to understand things much better.</p> <p>I am a kind of “Show me the code” programmer, would love to play with code rather than learning by just theory. When I am learning Jade, I found it very interesting as I never exposed to <a href="http://haml-lang.com">haml</a> kind of syntax. To learn it, I’ve created a sample web-page in node.js and for each feature in Jade, I’ve modified the jade page and understand its behaviour by seeing the html source in the browser.</p> <p>One day after toying with Jade for quite some time, I’ve went to bed and it strikes. <em>“How nice it would be to have a “Try it yourself” kind of feature for learning jade ?”</em>&nbsp; and hence <a href="http://jade-visualizer.herokuapp.com/">Jade-Visualizer</a></p> <p><strong>How to use Jade-Visualizer ?</strong></p> <p>Jade-Visaulizer is a single-page app, with only three parts. </p> <blockquote> <p>1. The Jade Template – A textarea to play with the jade-template</p> <p><a href="http://lh3.ggpht.com/-v_4K4nC5X8g/T7akj2dl48I/AAAAAAAAAYA/9IwuGzv5CxA/s1600-h/image%25255B3%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/-tX9_bKdkoCM/T7akk6bPFmI/AAAAAAAAAYI/jxhVxCnRcvk/image_thumb%25255B1%25255D.png?imgmax=800" width="352" height="133"></a></p></blockquote> <blockquote> <p>2. Data – Want to mix some data with the jade template ? It is for you. Enter some hacky data in JSON format in it and start toying!</p> <p><a href="http://lh5.ggpht.com/-cpsUeVldirk/T7akmeaR3EI/AAAAAAAAAYQ/xnpFbbSatxg/s1600-h/image%25255B7%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/-lq2NOBAmynI/T7aknqHcIxI/AAAAAAAAAYY/_7wiHbu2XPw/image_thumb%25255B3%25255D.png?imgmax=800" width="313" height="122"></a></p> <p>3. Output – Excited about what would be the generated output ? This part will help you to feed your brain.</p> <p align="center"><a href="http://lh6.ggpht.com/-CkroM0OM1II/T7ako3S4kTI/AAAAAAAAAYc/aNGmF8Ce0Cg/s1600-h/image%25255B11%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-FzPHwu-tPxc/T7akpxtOanI/AAAAAAAAAYo/lRg032qDWgA/image_thumb%25255B5%25255D.png?imgmax=800" width="342" height="96"></a></p> <p align="center">Don’t forget to click the “Translate” button to view the html <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh4.ggpht.com/-t_I-2AzWiW8/T7akq4S6BXI/AAAAAAAAAYw/msikTfLIqoY/wlEmoticon-smile%25255B2%25255D.png?imgmax=800"></p></blockquote> <p align="left"><strong>Behind the Scene</strong></p> <p align="left">Curious about what are all the things behind this app ? Here is the list</p> <ul> <li> <div align="left"><a href="http://nodejs.org">Node.js</a> - My new toy in programming</div> <li> <div align="left"><a href="http://socket.io/">Socket.Io</a></div> <li> <div align="left"><a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a></div> <li> <div align="left"><a href="http://codemirror.net/">CodeMirror</a> and <a href="http://google-code-prettify.googlecode.com/svn/trunk/README.html">Prettify</a></div> <li> <div align="left"><a href="https://github.com/tamizhvendan/jade-visualizer">Github</a></div> <li> <div align="left"><a href="http://www.heroku.com/">Heroku</a></div></li></ul> <p><strong>Why Node.js ?</strong></p> <p>There are lot of fuss about Node.js in the industry. Will it scale ? Is it insanely fast ? JavaScript on server side ? Will it work out?. I am not going to answer for these questions and I am not a expert too! I believe a <a href="http://lmgtfy.com/?q=nodejs">simple google search</a> will help you much much better than me. Then why this section in this blog post ? Let me explain</p> <p>I would like to add an another flavour to Node.js by putting my words on <em>why you should learn Node.js </em>especially if you are from a .net background like me</p> <ul> <li><em>I’m using </em><a href="http://www.ubuntu.com"><em>Ubuntu</em></a><em> to play with node.js –</em> Node has helped me to come out from windows and inspired me to work with Linux for the first time in my life  <li><em>I’m using </em><a href="http://www.vim.org/"><em>Vim</em></a><em> to write node.js apps – </em>Awesome editor! I am regretting myself for not using this so far. Its my default editor even in windows now&nbsp; <li><em>I’m using </em><a href="https://github.com"><em>Github</em></a><em> as a version control</em> to store <a href="https://github.com/tamizhvendan/NodeJsKatas">my nodejs katas</a>  <li><em>I’ve full control over my apps in node.js – </em>Its helping me to learn some of the under the hood stuff which I never learnt before. <a href="https://github.com/tamizhvendan/jade-visualizer">Source code of Jade-Visualizer</a> is an excellent example for this. I am using my own module to serve the static files. Yes, I’m re-inventing the wheel. But I am learning, That’s good for myself!  <li><em>I’m a part of </em><a href="http://nodejs.org/community/"><em>vibrant community</em></a> – I’m having a sense of belonging feeling  <li><em>I’m getting better at javascript</em> – I love this tricky language and its really twisting my programming brain  <li><em>I’m getting exposed to various frameworks, tools, datastores, techniques, skills</em> every day which I like very much  <li>Last but not least, <em>its helping me to contribute back to the community</em></li></ul> <p><u>Note:</u> Its just my personal views, I’m just sharing what are all benefits that I am reaping by virtue of Node.js.</p> <p><strong>Summary</strong></p> <p>I would like to conclude this blog post by dedicating the “jade-visualizer” to all the open-source contributors in the planet. Its you who inspired me! Hearty thanks to one and all <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh4.ggpht.com/-t_I-2AzWiW8/T7akq4S6BXI/AAAAAAAAAYw/msikTfLIqoY/wlEmoticon-smile%25255B2%25255D.png?imgmax=800"></p>  </div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An interesting JSON Model Binding behaviour in ASP.NET MVC3]]></title>
    <link href="http://tamizhvendan.github.com/blog/2012/04/13/interesting-json-model-binding/"/>
    <updated>2012-04-13T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2012/04/13/interesting-json-model-binding</id>
    <content type="html"><![CDATA[<div class='post'>
<p><strong>Introduction</strong></p> <p><a href="http://msdn.microsoft.com/en-us/library/dd410405.aspx">Model Binding</a> is one of the coolest feature in ASP.NET MVC3. Like a magic wand, your form element values, <a href="http://www.json.org/">JSON values</a>, also query string values automatically get converted to the equivalent C# object and makes the life of the developer easier.</p> <p>The default behaviour of MVC3 model binding works well in more common scenarios. But in certain cases it wont work as expected, and in such situations we need to <a href="http://odetocode.com/blogs/scott/archive/2009/04/27/6-tips-for-asp-net-mvc-model-binding.aspx">write custom model binders</a>. Two weeks before while I was working with model binding on JSON values, I’ve encountered an interesting behaviour of JSON model binding. </p> <p>If a JSON property contains a string, it get bind to a string property of the equivalent C# object. But if that same JSON property contains a empty string, while model binding, the equivalent C# object’s property is assigned to null and not to empty string! The same happened with arrays. If it contains elements, it get bind without any problems. But if the array is empty it get bind to null!!</p> <p>In this blog post, we are going to get rid of this intriguing behaviour by writing a Custom JSON model binder. Hope it would be useful and save you some hairs <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh4.ggpht.com/-hMLWJJ1A8N0/T4dGoWX_KJI/AAAAAAAAAUw/nCxcTP1Y03E/wlEmoticon-smile%25255B2%25255D.png?imgmax=800">&nbsp;</p> <p><strong>The Sample Application – “MyMobileStore”</strong></p> <p>In this blog post we are going to see a small application called “MyMobileStore”. This sample app has two features. One will help you to search the mobiles in the “MyMobileStore” by using the company name and the mobile types. An another feature will help you to find out the sales details of the mobiles from a given company for the specified mobile types.</p> <p><strong>Show me the code</strong></p> <p>Core classes</p> <p><a href="http://lh3.ggpht.com/-fxMWjV8D8Ss/T4dGqZvq7SI/AAAAAAAAAU4/P0S_EsPCuMk/s1600-h/MobileStore.Models%25255B6%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="MobileStore.Models" border="0" alt="MobileStore.Models" src="http://lh6.ggpht.com/-3-BF9lnW55U/T4dG2YfBOBI/AAAAAAAAAVA/bTqAuVRhIE0/MobileStore.Models_thumb%25255B4%25255D.png?imgmax=800" width="586" height="465"></a>&nbsp;</p> <p>As mentioned earlier, the two features of “MyMobileStore” are exposed as controller action methods as below</p> <p><a href="http://lh5.ggpht.com/-vw3lgopcU68/T4dG-qsPNYI/AAAAAAAAAVI/pP6ELrufEbs/s1600-h/MobileStore.Controller%25255B22%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="MobileStore.Controller" border="0" alt="MobileStore.Controller" src="http://lh5.ggpht.com/-YFmmpU3XOsg/T4dHDro__YI/AAAAAAAAAVQ/c1Chj14oXis/MobileStore.Controller_thumb%25255B14%25255D.png?imgmax=800" width="622" height="313"></a></p> <p>Both action methods uses a parameter of type “MobileFilter” which actually holds the filter criteria for finding out the mobiles. It has two properties, the companyname of the mobile and the collection of mobile types (Normal, DualSim or SmartPhone)</p> <p><a href="http://lh5.ggpht.com/-hn0O_INXTE0/T4dHFzxaYhI/AAAAAAAAAVY/P0PMuJnMyfI/s1600-h/MobileStore.MobileFilter%25255B4%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="MobileStore.MobileFilter" border="0" alt="MobileStore.MobileFilter" src="http://lh6.ggpht.com/-iadu7SEfjsI/T4dHItYsp7I/AAAAAAAAAVg/5PsroMEN4gA/MobileStore.MobileFilter_thumb%25255B2%25255D.png?imgmax=800" width="452" height="124"></a></p> <p>The SearchMobiles action method retrieves all the mobiles from the repository and filter it first by the company name and then by the mobile types. One small tweak, if the mobile types count is more than 3, it would take only the first 3 types (Added for demo purpose). I just left the logic of SalesDetails action method blank to keep it simple. Both actions returns a JSON result to make them consumed by ajax. </p> <p><em>(Note: I’ve violated some design principles in the sample code as I just wanted to make this blog post as simple as possible) </em></p> <p><strong>The Problem (Opportunity in my language)</strong></p> <p>In a good world, if the user selected either or both the company name and the mobiles types to be filtered, then our controller in “MyMobileStore” will happily accepts them as a parameter and continue its work without any mishaps.</p> <p><a href="http://lh4.ggpht.com/-vRXoXBgz8D4/T4dHNZ-7KcI/AAAAAAAAAVo/VVNPUSop03M/s1600-h/GoodWorld%25255B11%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="GoodWorld" border="0" alt="GoodWorld" src="http://lh6.ggpht.com/-gJQvm087Qx0/T4dHSfpRr_I/AAAAAAAAAVw/iuQi2t2NRr4/GoodWorld_thumb%25255B7%25255D.png?imgmax=800" width="661" height="239"></a></p> <p>But in the bad world, if the user missed out either the company names or the mobiles types or both, ASP.NET MVC3 treat them as nulls which might cause null reference exception and breaks the functionality!!</p> <p><a href="http://lh3.ggpht.com/-zxF7hZmWD2o/T4dHW4U4SyI/AAAAAAAAAV4/XqcJBQrPkUo/s1600-h/BadWorld%25255B11%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="BadWorld" border="0" alt="BadWorld" src="http://lh3.ggpht.com/-P_Y8J8MYteg/T4dHbSlOXcI/AAAAAAAAAWA/dZdSpd8PLEg/BadWorld_thumb%25255B7%25255D.png?imgmax=800" width="636" height="215"></a></p> <p><a href="http://lh3.ggpht.com/-2gENeQC8-Y8/T4dHe4d8_wI/AAAAAAAAAWI/HPCz3jXVDjo/s1600-h/NullException%25255B4%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="NullException" border="0" alt="NullException" src="http://lh5.ggpht.com/-RyHNe74MVW0/T4dHmUDoR2I/AAAAAAAAAWQ/qqPLk1C-ch0/NullException_thumb%25255B2%25255D.png?imgmax=800" width="587" height="224"></a></p> <p><em>(Now you might have understood why I added a tweak in the number of mobile types <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh4.ggpht.com/-hMLWJJ1A8N0/T4dGoWX_KJI/AAAAAAAAAUw/nCxcTP1Y03E/wlEmoticon-smile%25255B2%25255D.png?imgmax=800">)</em></p> <p><strong>Possible Solutions</strong></p> <ol> <li>Perform null check inside the “SearchMobiles” action method and assign empty array.  <li>Write a Custom Model Binder for “MobileFilter” and perform the null check inside the model binding logic</li></ol> <p>Though the option 1 is a simple and straightforward thing, what would you do if the “SalesDetails” action method works with the mobile types collection. You certainly need to duplicate the null checking inside it also. Let us assume that we have some more action methods in our “MyMobileStore” which has “MobileFilter” as their parameter. Do you still duplicate the null check there ?. Think!!</p> <p>If you do so, I am sorry my dear friend, you are violating the <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> principle and creating <a href="http://pragprog.com/the-pragmatic-programmer/extracts/software-entropy">a broken window</a> in your codebase! So, lets go ahead and write <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">clean code</a> by making use of Custom Model Binder for our “MobileFilter”. </p> <p><strong>The Pragmatic Solution – MobileFilterModelBinder</strong></p> <p><a href="http://lh6.ggpht.com/-WMCSZqixw84/T4dHp3lrbUI/AAAAAAAAAWY/HAnThoFkLV4/s1600-h/MobileFilterModelBinder%25255B4%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="MobileFilterModelBinder" border="0" alt="MobileFilterModelBinder" src="http://lh4.ggpht.com/-9PTZzIRxGGI/T4dHxGaIGsI/AAAAAAAAAWg/nemjRAmAxQ0/MobileFilterModelBinder_thumb%25255B2%25255D.png?imgmax=800" width="599" height="217"></a></p> <p>Our custom model binder is very simple, it just makes use of Default Model binding behaviour. After the default behaviour has been done, it checks for null values using <a href="http://msdn.microsoft.com/en-us/library/ms173224.aspx">Null-Coalescing operator</a> and assign empty values if the values are null.</p> <p>Don’t forget add the custom model binder in the Global.asax.cs file.</p> <p><a href="http://lh4.ggpht.com/-CtB3Tyf2R0A/T4dH0cXv0vI/AAAAAAAAAWo/1SolqnuzAnQ/s1600-h/Global%25255B5%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Global" border="0" alt="Global" src="http://lh4.ggpht.com/-1S7YsQtwsqg/T4dH3Q_Hy4I/AAAAAAAAAWw/KPEMvHzZM7o/Global_thumb%25255B3%25255D.png?imgmax=800" width="556" height="127"></a></p> <p>Now our “MyAppStore” is robust enough to tackle the bad world!!</p> <p><a href="http://lh4.ggpht.com/-gXZi5xzFs8A/T4dH6L3oweI/AAAAAAAAAW4/j4Lfrb41GQk/s1600-h/NoMoreBadWorld%25255B6%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="NoMoreBadWorld" border="0" alt="NoMoreBadWorld" src="http://lh6.ggpht.com/-nXUV9lG-0H0/T4dH86VvlYI/AAAAAAAAAXA/y6IipcvXf10/NoMoreBadWorld_thumb%25255B4%25255D.png?imgmax=800" width="647" height="236"></a></p> <p><strong>Conclusion</strong></p> <p>In this blog post you have seen an exciting problematic behaviour of JSON model binding in ASP.NET MVC3 and a simple way to get rid of the default model binding problems. In my next blog post I would share my experiences in how to unit test this custom model binders. You can download the source code that I have used in this blog post from <a href="http://www.box.com/s/16dbb662bb2f94babe27">here</a>.&nbsp;&nbsp; </p>  </div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Html Helpers in ASP.NET MVC3–The Cleaner Way]]></title>
    <link href="http://tamizhvendan.github.com/blog/2012/03/04/unit-testing-html-helpers-in-aspnet/"/>
    <updated>2012-03-04T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2012/03/04/unit-testing-html-helpers-in-aspnet</id>
    <content type="html"><![CDATA[<div class='post'>
<p>&nbsp;</p> <p>Would you like if your unit test have an assertion like this ?</p> <p><a href="http://lh5.ggpht.com/-FDQ2c83mm_8/T1J71NC-XCI/AAAAAAAAASI/eIpCPMZakQE/s1600-h/image5.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/-Z7XXVGQ3sX4/T1J73ct1gqI/AAAAAAAAASQ/qw-uSNrLoOE/image_thumb3.png?imgmax=800" width="628" height="69"></a></p> <p>IMHO having a unit test assertion like this with a long magical string value would become a maintenance problem with additional logic being added. It breaks with even minor changes like “adding an extra whitespace” though it is logically correct(Browsers ignores the whitespaces while rendering html)!. It is harder to debug to!!</p> <p>How can we get rid of this long string assertion ? Is there any better way to do assertion against this long magical string ejected from a <a href="http://stephenwalther.com/blog/archive/2009/03/03/chapter-6-understanding-html-helpers.aspx">HtmlHelper</a> ? One thing which strikes on my mind when I come across this problem is why don’t we parse the string as an xml and assert against the xml element instead. It might appear like laborious at the first sight, but by making use of <a href="http://msdn.microsoft.com/en-us/library/system.xml.linq.xelement.aspx">XElement</a> and <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension methods</a> we can easily do that. In the blog post we are going to see how can we implement this in a more cleaner way. </p> <p>Okay.. Enough texts.. Its time to see some code!!</p> <p>The first step is to convert the “html string” returned by the html helper to XElement. Generally most of the helpers returns <a href="http://stackoverflow.com/questions/2293357/what-is-an-mvchtmlstring-and-when-should-i-use-it">MvcHtmlString</a>, So, we can easily achieve this by writing an extension method called “ToXElement” on MvcHtmlString. </p> <p><a href="http://lh6.ggpht.com/-W07RFESAS4c/T1J74hx5WKI/AAAAAAAAASY/3aru4sQaYN4/s1600-h/image%25255B5%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-cwtnsV7pl2c/T1J763QmH1I/AAAAAAAAASg/6QKxAEGZ5uM/image_thumb%25255B2%25255D.png?imgmax=800" width="565" height="94"></a>&nbsp;&nbsp;&nbsp; </p> <p>That’s it! All set to redefine the way custom html helpers are being tested. </p> <p>Fine, Let us see it in action. We will start with a handy HtmlHelper method called “Button” which would render a “Html button tag” and here is the test to assert it.</p> <p><a href="http://lh5.ggpht.com/-za3MS4XrLpw/T1J78AnSQFI/AAAAAAAAASo/yDb5ICkLXG8/s1600-h/image%25255B17%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-Zl-hH4zYH1A/T1J7_Y9Qr3I/AAAAAAAAASw/PyWZZJMadV0/image_thumb%25255B10%25255D.png?imgmax=800" width="570" height="417"></a></p> <p>The first test uses the ToXElement extension method and assert against the XElement’s properties whereas the second test uses the “magical string with tags added” to do the assertion. Now you may feel what’s wrong with this guy the second test look clean to me, why he is making fuss about it. Yes you are correct, the second one looks clean. But it appears to be clean as the requirement in hand is very simple. </p> <p>IMHO the custom html helpers that we are building in our real world application won’t be as simple as having a button tag with just plain caption in it. </p> <p>Fine, lets see the real world. Voice from your team lead <em></em></p> <p><em>Hey! the Button HtmlHelper you designed has did a tremendous job. Can you make a small change on it so that it would <strong>generate a button with a class attribute having the value ‘appbutton’ by default</strong>. We need it because it make the button styling consistent with rest of our application ” </em></p> <p>Let us implement the feature by starting with the test for it</p> <p><a href="http://lh4.ggpht.com/-HScL-9YaD1s/T1J8Awk2YbI/AAAAAAAAAS4/Q3E6JlpRItM/s1600-h/image%25255B23%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/-MyHzxXBfdCM/T1J8DL_KgbI/AAAAAAAAATA/Vvt1j4k-KYo/image_thumb%25255B14%25255D.png?imgmax=800" width="594" height="232"></a></p> <p>Now tell me is the second test clean ? I don’t think so. The generate html string is bit long now also having double quotes inside double quotes makes it hard to read. At the same time the first test remains robust and clean. </p> <p>Still not convinced, okay just go up and see the very first test that we have wrote to test the button caption. Do you think the <strong>hard way test</strong> with the “<strong>long magical string</strong>” still pass ?? </p> <p align="center"><strong><font color="#ff0000">It would fail</font></strong></p> <p>Why ?? Here is the error message </p> <p><a href="http://lh5.ggpht.com/-K6RjhSEMhLA/T1J8EpZAZ-I/AAAAAAAAATI/TUutsjz0XdE/s1600-h/image%25255B28%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-SpmB-mDwffk/T1J8HO3Np4I/AAAAAAAAATQ/oKxboMdbr6I/image_thumb%25255B17%25255D.png?imgmax=800" width="555" height="132"></a></p> <p>Now what would you do, if you decided to persist with the “long magical string”, then your action would be editing the test as below</p> <p><a href="http://lh6.ggpht.com/-Yajc-wdfVIQ/T1J8I0PkK_I/AAAAAAAAATY/--qlo0cmunI/s1600-h/image%25255B34%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/-RJKnvJ5K8dI/T1J8LTJG_iI/AAAAAAAAATg/TAKyOA5Ej9w/image_thumb%25255B21%25255D.png?imgmax=800" width="558" height="127"></a></p> <p>Nice job. Now tell me what is the difference between this one and the below one</p> <p><a href="http://lh6.ggpht.com/-ps4dX_FO-B0/T1J8MhVBtwI/AAAAAAAAATo/u003U24qiBo/s1600-h/image%25255B42%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-i5zAV0v0JfY/T1J8O7pNIiI/AAAAAAAAATw/Fuo_4WMsFzk/image_thumb%25255B27%25255D.png?imgmax=800" width="559" height="137"></a></p> <p>Apart from the test method name everything is same. Is the test clean ? Is the test clearly saying what it is trying to assert ? What would happen if we got the requirement to add one more attribute or even more? Think !! </p> <p>But at the same time the tests which written using XElement assertion would remain healthy and their test method name mean what it is testing </p> <p><a href="http://lh6.ggpht.com/-t5GRHpUvWSI/T1J8Qh6dvqI/AAAAAAAAAT4/WaaIvzaEKCY/s1600-h/image%25255B47%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-fQ_eFoBZqnE/T1J8TPZgtFI/AAAAAAAAAUA/1wGDDsT5J8Y/image_thumb%25255B30%25255D.png?imgmax=800" width="549" height="208"></a></p> <p>I leave it you to decide which one is cleaner. </p> <p><strong>Summary</strong></p> <p>Here is the implementation of “Button HtmlHelper” that we unit tested so far</p> <p><a href="http://lh4.ggpht.com/-IBHYFHvayKk/T1J8Wio7xLI/AAAAAAAAAUI/fTeU7Q_Njg4/s1600-h/image%25255B52%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-lg0jE79JCVI/T1J8Y3QGqOI/AAAAAAAAAUQ/gif78dMv6XI/image_thumb%25255B33%25255D.png?imgmax=800" width="546" height="134"></a></p> <p>My humble request to the readers of this blog post, please take care of your “Unit tests” and give some more importance to it. An hour spent upfront would save a day in future.&nbsp;&nbsp; </p> <p>“Beauty is in the eye of the beholder”, If you have a better idea to do the same, kindly leave a comment, I am open to learn from you.</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Custom Model Binders in MVC3]]></title>
    <link href="http://tamizhvendan.github.com/blog/2012/02/11/unit-testing-custom-model-binders-in/"/>
    <updated>2012-02-11T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2012/02/11/unit-testing-custom-model-binders-in</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on">&nbsp;In <a href="http://sweettam.blogspot.in/2012/02/unit-testing-with-sessions-in-aspnet.html">my previous post</a> we have seen a way to do unit testing with Sessions in MVC3 using Custom model binders. In this blog post we are going to see how to do unit test the model binder itself.<br />One remarkable thing which everybody hails in MVC3 is its extensibility and its testability. You can extend/customize the components in the framework and also you can unit test them with ease.<br />Before getting into unit testing the custom model binder, Lets have a closer look at the <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.imodelbinder.bindmodel.aspx">BindModel</a> method<br /><br /><a href="http://lh3.ggpht.com/-FYDs3Mj_C6Q/TzX3DB51lCI/AAAAAAAAARU/Sg3jlORHi-4/s1600-h/image%25255B11%25255D.png"><img alt="image" border="0" height="333" src="http://lh5.ggpht.com/-w7ARZ_zbZbo/TzX3I1rgogI/AAAAAAAAARc/NXOGcGRY1JI/image_thumb%25255B7%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="636" /></a><br /><br />In the BindModel method we are making use of Session property in the HttpContext object which is in turn a property of the <a href="http://msdn.microsoft.com/en-us/library/dd492673.aspx">ControllerContext</a> object that is passed to the BindModel method as a parameter by the MVC3 framework. In order to unit test this method we need to have to control over the HttpContext property of the ControllerContext and the Session property of the HttpContext.<br /><br />How to get control over those properties ? Thanks to <a href="http://msdn.microsoft.com/en-us/library/dd460098.aspx">a constructor of ControllerContext</a><br /><br /><a href="http://lh5.ggpht.com/-ixI6lEdO86k/TzX3KkjVicI/AAAAAAAAARk/BlDxNVgK5pQ/s1600-h/image%25255B15%25255D.png"><img alt="image" border="0" height="79" src="http://lh4.ggpht.com/-VrPS_TC8zSE/TzX3NHFidkI/AAAAAAAAARs/zeEwGeOcc8g/image_thumb%25255B9%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="327" /></a><br /><br />ControllerContext uses the constructor dependency injection to get rid of the direct dependency on <a href="http://msdn.microsoft.com/en-us/library/system.web.httpcontextbase.aspx">HttpContextBase</a> and we are going to exploit this to do unit testing. Using a mocking framework we can easily create a mock of HttpContetBase and drive the unit test. <br /><br />The Session property of the HttpContextBase is of type <a href="http://msdn.microsoft.com/en-us/library/system.web.httpsessionstatebase.aspx">HttpSessionStateBase</a> which can also be mocked. <br />Here is the complete implementation of Test fixture class which unit test the CartModelBinder class that we have seen in the <a href="http://sweettam.blogspot.in/2012/02/unit-testing-with-sessions-in-aspnet.html">previous post</a> using the mocking library <a href="http://code.google.com/p/moq/">Moq</a>.<br /><br /><a href="http://lh4.ggpht.com/-X54hSC4cWCQ/TzX3Ptdoa7I/AAAAAAAAAR0/BkZTHYKOleg/s1600-h/CartModelBinderTests%25255B5%25255D.png"><img alt="CartModelBinderTests" border="0" height="732" src="http://lh4.ggpht.com/-O37KzgpVM5A/TzX3Tm7QXqI/AAAAAAAAAR8/7T6_b2_G6kA/CartModelBinderTests_thumb%25255B3%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="CartModelBinderTests" width="640" /></a><br /><br />I hope the test code is self-explanatory. </div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing with Sessions in ASP.NET MVC3]]></title>
    <link href="http://tamizhvendan.github.com/blog/2012/02/02/unit-testing-with-sessions-in-aspnet/"/>
    <updated>2012-02-02T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2012/02/02/unit-testing-with-sessions-in-aspnet</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on"><strong>Introduction</strong><br /><strong><br /></strong><br />While talking to my friend regarding his project, he told me about how he is doing unit testing which involves sessions in ASP.NET MVC3. His team is actually using a “HttpSimulator” which simulates the web request and then the do unit test by verifing the session by interacting with the simulator. When digging further I have come to know that this way of unit testing session objects are influenced from the “ASP.NET Webforms”. It reminds me the talk of <a href="http://www.infoq.com/presentations/Functional-Thinking">Neil Ford on Function Programming</a>. In that video he talks about an analogy called “Axe and Chain Saw” to explain our way of thinking as <br /><br />“<em>When we give a chain saw to people who were cutting trees by axe, they would tend to use chain saw in the same way as the use Axe. Which is obviously inefficient. So we should understand at the capabilities of the tool in our hand before we using it</em>”.&nbsp; <br /><br />ASP.NET MVC3 is far better than Web Forms when it comes to unit testing. We don’t need to use a simulator to test against our sessions. There is a better way to do this MVC3 and in this blog post we are going to explore it.<br /><br /><strong>Time for Code</strong><br /><br />Shopping Cart is the first thing that strikes our mind when we want to quote an example for using Http session. So, I am going to show an app called “MyShop” a mini shopping site through which I am going to explain the concepts involved. The application flow would be as follows<br /><br /><br /><a href="http://lh3.ggpht.com/-veHKJgG9HNU/TymS82HuJ0I/AAAAAAAAAOk/vOXzY9fwabM/s1600-h/image10.png"><img alt="image" border="0" height="244" src="http://lh5.ggpht.com/-Kktb0y6zQIE/TymTA_Wc-rI/AAAAAAAAAOs/r6peimvunPw/image_thumb4.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="429" /></a><br /><a href="http://lh5.ggpht.com/-6hpylGdgjiw/TymojeW2P_I/AAAAAAAAAP0/qvlzZNMg_Wg/s1600-h/image%25255B30%25255D.png"><img alt="image" border="0" height="244" src="http://lh3.ggpht.com/-D6npqL5HA_k/TymolKqBJvI/AAAAAAAAAP8/2HoD065v8OI/image_thumb%25255B17%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="427" /></a><br /><strong><br /></strong><br /><strong>Models</strong><br /><br />The models are simple, straight forward and self explanatory.<br /><a href="http://lh5.ggpht.com/-ortG_a_PwVE/TymTNT0eLjI/AAAAAAAAAPU/w9vnXGAmoTA/s1600-h/image%25255B12%25255D.png"><img alt="image" border="0" height="369" src="http://lh5.ggpht.com/-isQghzlWeL4/TymTQY1WnMI/AAAAAAAAAPc/GiTns7EdOQA/image_thumb%25255B7%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="545" /></a>  <br /><a href="http://lh6.ggpht.com/-2WQo9ssOLBs/TymTRp6yQNI/AAAAAAAAAPk/9YAy-l4vl6M/s1600-h/image%25255B18%25255D.png"><img alt="image" border="0" height="465" src="http://lh6.ggpht.com/-_hELgjwtvYg/TymTU2DRMtI/AAAAAAAAAPs/zWrhjhLK81E/image_thumb%25255B11%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="549" /></a><br /><br />I’ve tried my level best to keep the model as simple as possible. So, Cart in MyShop will have only two public methods. One to add a product to the Cart’s Line and another one to retrieve all the products inside the Cart’s line.<br /><strong><br /></strong><br /><strong>The CartController Version 1.0</strong><br /><br /><a href="http://lh6.ggpht.com/-vSa58jvGweQ/TymomWJ_9XI/AAAAAAAAAQE/f7BL7HHc52A/s1600-h/image%25255B35%25255D.png"><img alt="image" border="0" height="288" src="http://lh3.ggpht.com/-N9AbqPeQGSE/TymoogezScI/AAAAAAAAAQM/KgDINKGTQKs/image_thumb%25255B20%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="617" /></a><br /><br />In this CartController version 1.0 we have two public methods Index and AddToCart which are dependent on HttpSession object. This dependency inside the methods is actually preventing us from unit testing the CartController in simple way and we have no choice other than implementing a “Http Simulator” to unit test these two methods. As I said before there is better to do is! Here we go!!<br /><strong><br /></strong><br /><strong>The CartController Version 2.0</strong><br /><br /><a href="http://lh4.ggpht.com/-hTqWC6IQZss/Tymoprow9sI/AAAAAAAAAQU/4O5aL93jNmE/s1600-h/image%25255B40%25255D.png"><img alt="image" border="0" height="171" src="http://lh5.ggpht.com/-Orhgs7akhH4/TymorcHyusI/AAAAAAAAAQc/h3UXD9rir4g/image_thumb%25255B23%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="609" /></a><br /><br />No more Sessions!!.. Yeah.. We have got rid of the dependency on the session object by adding a new parameter called cart. Now you can use easily unit test the CartController as follows<br /><br /><a href="http://lh5.ggpht.com/-XyW5z3DOcko/Tymosc2C50I/AAAAAAAAAQk/lTcGoqvtrdk/s1600-h/image%25255B45%25255D.png"><img alt="image" border="0" height="283" src="http://lh5.ggpht.com/-SQoMaCM1g4U/Tymou0nwp9I/AAAAAAAAAQs/aF4qSRxi5A0/image_thumb%25255B26%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="614" /></a><br /><br />Okay we made it easy for unit testing by moving the dependency out of the method and introduced the cart as the parameter. But how does my MVC3 framework will know the cart parameter should come from session object ?… Good Catch!! and here comes the magic called custom ModelBinder<br /><strong><br /></strong><br /><strong>ModelBinder – A brief background</strong><br /><br />Model binding is an exciting feature in MVC3 framework which automatically creates the C# objects directly from Http request and pass it to the Action methods in controller as parameter values. It uses a default model binder which looks at the form values, query string values that are submitted with the Http Request and create the model object. <br /><strong><br /></strong><br /><strong>CartModelBinder</strong><br /><br />In our case, we need to have a object of Cart which is populated from the Session object and not from the HttpRequest. The default model binder used by MVC3 has no idea about session object. So, Its our responsibility to tell to the MVC3 framework <br /><br />“<em>Hey! If there is any parameter of type Cart in controller action method, then use my own custom model binder called CartModelBinder to create the object</em>”<br /><br />There are two steps to do the above said operation<br /><br />1. Creating the custom model binder by inheriting the IModelBinder interface<br /><br /><a href="http://lh3.ggpht.com/-LoWu0e9FP2g/TymowGB9o3I/AAAAAAAAAQ0/LcdKkwSTuKg/s1600-h/image%25255B51%25255D.png"><img alt="image" border="0" height="433" src="http://lh6.ggpht.com/-15pSTJi-7J0/TymozYGDbrI/AAAAAAAAAQ8/mFZD94wdjjM/image_thumb%25255B30%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="512" /></a><br /><br />2. Registering our custom model binder in the Global.asax.cs file<br /><br /><a href="http://lh6.ggpht.com/-Aj0wKqcEJY8/Tymo0vzC1SI/AAAAAAAAARE/cvLIoNjkjRM/s1600-h/image%25255B61%25255D.png"><img alt="image" border="0" height="122" src="http://lh5.ggpht.com/-6Yj7cjmQips/Tymo2LE_f-I/AAAAAAAAARM/E9aMHCTYCt8/image_thumb%25255B36%25255D.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="499" /></a><br /><br />That’s all.. MVC3 takes care of rest<br /><strong><br /></strong><br /><strong>Summary</strong><br /><br />In this blog post we have explored how we can get rid of “Http Simulator” to unit test the controllers which involves Session objects using custom model binder. You can download the working example of “MyShop” showcased in this blog post from <a href="http://www.box.com/s/b9lf2heukyivh68921jj">here</a>. Refer <a href="http://sweettam.blogspot.in/2012/02/unit-testing-custom-model-binders-in.html">my next blog post</a> to check out how to do unit testing with the custom model binder itself.</div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 – A year of aspirations]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/12/29/2012-year-of-aspirations/"/>
    <updated>2011-12-29T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/12/29/2012-year-of-aspirations</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on"><div align="justify"><br /></div><div align="justify">2011 has been a magnificent year for me both professionally and personally. The most significant thing about the year 2011 was the time that I have spent with my mentor, team mate and a good friend <a href="http://www.linkedin.com/pub/jijesh-mohan/a/488/545">Jijesh Mohan</a>. I have started the year with full of ambitions but with the uncertainty of how to achieve them. Though I have worked really hard to achieve those ambitions, I failed plenty of times while trying to reach the next level and the reason is absence of direction. Jijesh shared his experience with me and helped a lot in understanding various aspects of programming, software development and much more. Hearty thanks Jijesh <img alt="Smile" class="wlEmoticon wlEmoticon-smile" src="http://lh4.ggpht.com/-n3NYjmGhjro/TvyccIdnG0I/AAAAAAAAANY/-8YxbNYlPjU/wlEmoticon-smile%25255B2%25255D.png?imgmax=800" style="border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-style: none;" /> . The difference you made in my life as a programmer can not be expressed just by words.&nbsp; <br /><br /></div><div align="justify">It was a tough decision to make, but I have decided to leave Cognizant to explore different real time problems which are totally outside my comfort zone. I would like to thank my cherished manager&nbsp; <a href="http://www.linkedin.com/pub/ramakrishnan-venkatasubramanian/8/85/6a0">Ramakrishnan</a>, and beloved leads <a href="http://in.linkedin.com/pub/vijay-krishnan-ramaswamy/43/738/766">Vijay</a> and <a href="http://www.facebook.com/profile.php?id=100003088519900">Karthik</a>. Thank you all three for the inspiration, responsibilities and freedom you offered me to explore, learn, apply and adopt new technologies on various assignments. The trust you had in me helped a lot to shape up my professional career. I will surely miss you.<br /><br /></div><div align="justify"><strong>What’s Next ?</strong></div><div align="justify"><br />I will be joining <a href="http://www.advisory.com/">Advisory Board</a> in the first week on February 2012. I am very excited about it as it is a position that enable me to solve complex problems which involves huge volumes of data.&nbsp; <br /><br /></div><div align="justify"><strong>Goals </strong></div><div align="justify"><br />The one thing which keep me passionate and crazy about Computer Science is <strong>It is a path with no destination</strong>. One good lesson which I have learned last year is having goals like WaterFall model will not keep you valuable in the market. Like the requirements, the technologies are also volatile so the right way I believe is <strong>being Agile </strong>and the bottom line is set big goals, but make constant corrections along the way. My focus for the year 2012 would be</div><ul><li> <div align="justify">Javascript, HTML5, interactive Web Applications</div></li><li> <div align="justify">Functional Programming</div></li><li> <div align="justify">Working with huge volume of data</div></li><li> <div align="justify">Agile Methodologies</div></li><li> <div align="justify">Open Source Contributions</div></li><li> <div align="justify">Knowledge sharing through blogs and webinars</div></li></ul><div align="justify">Wish you all a very happy and prosperous new year.</div></div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Declarative in C#]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/11/22/going-declarative-in-c/"/>
    <updated>2011-11-22T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/11/22/going-declarative-in-c</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on"><br /><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang="EN-IN"><a href="http://en.wikipedia.org/wiki/Declarative_programming"><span style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">Declarative programming</span></a></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"> can often be a simpler, more concise way to describe the behaviour of a software program than </span><span lang="EN-IN"><a href="http://en.wikipedia.org/wiki/Imperative_programming"><span style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">imperative programming</span></a></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">. I am an admirer of declarative aspects of programming ever since I have started writing SQL queries. We always do our best to write code that is easier to read and maintain. Declarative style is one of the proven ways to write clean code. </span><span lang="EN-IN"><a href="http://msdn.microsoft.com/en-us/library/bb308959.aspx"><span style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">LINQ</span></a></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"> is an excellent example of declarative style programming that enables the developers to simply state what they want to do. When I am learning </span><span lang="EN-IN"><a href="http://learnyouahaskell.com/higher-order-functions"><span style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">higher order functions in Haskell</span></a></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">, I have found the interrelationship between the higher order functions and the LINQ. It really made me to think in a different way to solve a problem. Through this blog post I would like to share my experiments on </span><span lang="EN-IN"><a href="http://en.wikipedia.org/wiki/Higher-order_function"><span style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">higher order functions</span></a></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"> in C#.</span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Let me start with a very simple requirement. </span></div><div align="center" class="MsoNormal" style="line-height: 150%; text-align: center;"><i style="mso-bidi-font-style: normal;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">Write a program to print the even numbers present in the given n numbers</span></i></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The code implementation fairly straight forward as below</span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-F8d-q0yfDxQ/TsutZtHjXFI/AAAAAAAAAMM/VZOQO-TrRkM/s1600/PrintEvenNumbers.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="186" src="http://2.bp.blogspot.com/-F8d-q0yfDxQ/TsutZtHjXFI/AAAAAAAAAMM/VZOQO-TrRkM/s320/PrintEvenNumbers.PNG" width="320" /></a></div><div align="center" class="MsoNormal" style="line-height: 150%; text-align: center;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"><br /></span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fine. Let me add some more twist to the code by adding two more requirements.</span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i style="mso-bidi-font-style: normal;">Modify the program implemented above to print odd numbers and multiples of four present in the given n numbers</i></span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To be honest, If I have encountered this requirements before I have learnt Higher Order Functions my implementation would be as follows.</span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-6Yj8HNUD34s/Tsutfjqe-AI/AAAAAAAAAMU/Oq7SKgTBOyA/s1600/TwoMoreReq.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="142" src="http://2.bp.blogspot.com/-6Yj8HNUD34s/Tsutfjqe-AI/AAAAAAAAAMU/Oq7SKgTBOyA/s320/TwoMoreReq.PNG" width="320" /></a></div><div align="center" class="MsoNormal" style="line-height: 150%; text-align: center;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"><br /></span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If you look at the above implementation with a critical eye, you can find a potential candidate of duplication. Let me explain the common pattern that is being used in the implemented PrintXXXX functions.</span></div><div class="MsoListParagraphCxSpFirst" style="line-height: 150%; margin-left: .75in; mso-add-space: auto; mso-list: l0 level1 lfo1; text-align: justify; text-indent: -.25in;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">1.<span style="font: normal normal normal 7pt/normal 'Times New Roman';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">For each number in the numbers enumerable </span></div><div class="MsoListParagraphCxSpMiddle" style="line-height: 150%; margin-left: 1.25in; mso-add-space: auto; mso-list: l0 level2 lfo1; text-align: justify; text-indent: -.25in;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">a.<span style="font: normal normal normal 7pt/normal 'Times New Roman';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">Decide whether the number should be printed or not (<b style="mso-bidi-font-weight: normal;">Deciding</b>)</span></div><div class="MsoListParagraphCxSpMiddle" style="line-height: 150%; margin-left: 1.25in; mso-add-space: auto; mso-list: l0 level2 lfo1; text-align: justify; text-indent: -.25in;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">b.<span style="font: normal normal normal 7pt/normal 'Times New Roman';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">Print the number if it is passes the above decision (<b style="mso-bidi-font-weight: normal;">Doing</b>)</span></div><div class="MsoListParagraphCxSpMiddle" style="line-height: 150%; text-align: justify;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-9xr-Hu8TT7U/TsutkGNc9SI/AAAAAAAAAMc/_JeMMy5u1RY/s1600/Duplication.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-9xr-Hu8TT7U/TsutkGNc9SI/AAAAAAAAAMc/_JeMMy5u1RY/s320/Duplication.PNG" width="298" /></a></div><div align="center" class="MsoListParagraphCxSpMiddle" style="line-height: 150%; text-align: center;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"><br /></span></div><div align="center" class="MsoListParagraphCxSpMiddle" style="line-height: 150%; text-align: center;"><br /></div><div class="MsoListParagraphCxSpMiddle" style="line-height: 150%; margin-left: 0in; mso-add-space: auto; text-align: justify; text-indent: .5in;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">All the three functions iterate over the numbers enumerable and print the numbers. The only thing which actually differentiates the functions is deciding which numbers to be printed.</span></div><div class="MsoListParagraphCxSpMiddle" style="line-height: 150%; margin-left: 0in; mso-add-space: auto; text-align: justify; text-indent: .5in;"><br /></div><div class="MsoListParagraphCxSpMiddle" style="line-height: 150%; margin-left: 0in; mso-add-space: auto; text-align: justify; text-indent: .5in;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">Now the question is how can we eliminate this duplication????</span></div><div class="MsoListParagraphCxSpMiddle" style="line-height: 150%; margin-left: 0in; mso-add-space: auto; text-align: justify; text-indent: .5in;"><br /></div><div class="MsoListParagraphCxSpMiddle" style="line-height: 150%; margin-left: 0in; mso-add-space: auto; text-align: justify; text-indent: .5in;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">It’s where higher order functions come into picture. If we move the deciding part of the function away from its implementation then we can easily achieve it.&nbsp;&nbsp; Here we go! The brand new implementation of Print would be </span></div><div class="MsoListParagraphCxSpMiddle" style="line-height: 150%; margin-left: 0in; mso-add-space: auto; text-align: justify; text-indent: .5in;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-9RF4Km0s1NA/TsutoVD_WkI/AAAAAAAAAMk/GWASEODqJTk/s1600/HigherOrderPrint.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="202" src="http://2.bp.blogspot.com/-9RF4Km0s1NA/TsutoVD_WkI/AAAAAAAAAMk/GWASEODqJTk/s320/HigherOrderPrint.PNG" width="320" /></a></div><div align="center" class="MsoListParagraphCxSpMiddle" style="line-height: 150%; margin-left: 0in; mso-add-space: auto; text-align: center; text-indent: .5in;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"><br /></span></div><div class="MsoListParagraphCxSpLast" style="line-height: 150%; margin-left: .75in; mso-add-space: auto; text-align: justify;"><br /></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In the new implementation we have just isolated the deciding part of the function from its implementation and parameterize it as function delegate that takes an integer as its input and return a Boolean value.&nbsp; In the client code (Main function) we are actually just calling the print function and declaratively telling it to print only those numbers which satisfies the given condition. As we separated the deciding part from the actual implementation, we can easily accommodate any future requirements like “<i style="mso-bidi-font-style: normal;">Printing multiples of five, printing only single digit numbers</i>” by declarative calling the Print function like as below</span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-iunnD2jPXv8/TsutsrFa_4I/AAAAAAAAAMs/oE81RX5J8gY/s1600/AccomodatedRequirement.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="135" src="http://4.bp.blogspot.com/-iunnD2jPXv8/TsutsrFa_4I/AAAAAAAAAMs/oE81RX5J8gY/s320/AccomodatedRequirement.PNG" width="320" /></a></div><div align="center" class="MsoNormal" style="line-height: 150%; text-align: center;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"><br /></span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cool.. Isn’t it ? Let me complicate the things little more. What would you do if you want to call this Print method across different classes?. A notorious option would be creating a </span><span lang="EN-IN"><a href="http://en.wikipedia.org/wiki/Utility_class"><span style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">Utility class</span></a></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"> with the Print method and calling it from the other classes. We can also solve these using </span><span lang="EN-IN"><a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx"><span style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">Extension methods</span></a></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"> which results a clean readable code like as below</span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-DZVepYydQ84/TsutwLqz__I/AAAAAAAAAM0/eNlsA0F2jzI/s1600/ExtensionMethod.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="185" src="http://4.bp.blogspot.com/-DZVepYydQ84/TsutwLqz__I/AAAAAAAAAM0/eNlsA0F2jzI/s320/ExtensionMethod.PNG" width="320" /></a></div><div align="center" class="MsoNormal" style="line-height: 150%; text-align: center;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"><br /></span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; So far, so good. We have started with a single function and then we added two more, then eliminated the duplication using Higher Order functions and finally we have made the code readable by using extension method. </span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Okay. Now “<i style="mso-bidi-font-style: normal;">I want to print the strings which starts with ‘s’ in the given n strings </i>”. Pardon me for complicating things, I will stop by this one.</span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It is almost logically similar to what we have done so far. Instead of numbers here it is string. How can we put it into action?. Thanks to </span><span lang="EN-IN"><a href="http://msdn.microsoft.com/en-us/library/512aeb7t%28v=vs.80%29.aspx"><span style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">Generics</span></a></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">. We can easily achieve this by modifying the extension method to support generic type as below</span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-Cwp_3vrURcU/Tsut-VkAqjI/AAAAAAAAAM8/UrutESWMdw4/s1600/GenericExtensionMethod.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="174" src="http://3.bp.blogspot.com/-Cwp_3vrURcU/Tsut-VkAqjI/AAAAAAAAAM8/UrutESWMdw4/s320/GenericExtensionMethod.PNG" width="320" /></a></div><div align="center" class="MsoNormal" style="line-height: 150%; text-align: center;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"><br /></span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; That’s it. Now you are free to play with all sort of logic you want. You can play with different set of conditions to print the elements or even you can also use different collection of your custom classes. And all can be done declaratively!!</span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Now its time to reveal to the interrelationship exists between the LINQ and the higher order functions. All the LINQ methods are actually using these Print extension methods kind of extension methods under the hood and makes the life of developer easily but letting them to work declaratively. </span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang="EN-IN"><a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.parallel.aspx"><span style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">Parallel Class</span></a></span><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"> a new addition in C# 4.0, also uses higher order functions and enables the developer to say “Hey CLR, I wanna run these methods parallel”. </span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-oghYOKAdsl4/TsuuMGSPzJI/AAAAAAAAANE/YVpPV4cfTOU/s1600/Parallel+Invoke.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="141" src="http://3.bp.blogspot.com/-oghYOKAdsl4/TsuuMGSPzJI/AAAAAAAAANE/YVpPV4cfTOU/s320/Parallel+Invoke.PNG" width="320" /></a></div><div align="center" class="MsoNormal" style="line-height: 150%; text-align: center;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;"><br /></span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Awesome! No new thread creation and no verbose. </span></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><b style="mso-bidi-font-weight: normal;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">Summary</span></b></div><div class="MsoNormal" style="line-height: 150%; text-align: justify;"><span lang="EN-IN" style="font-family: Georgia, serif; font-size: 12pt; line-height: 150%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Declarative Programming is powerful tool. It creates more readable, cleaner code and also saves the possibility of logical mistakes in multiple similar algorithms. That means fewer mistakes now and in the future.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></div></div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Think Before You LINQ]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/11/03/think-before-you-linq/"/>
    <updated>2011-11-03T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/11/03/think-before-you-linq</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
<p>LINQ is an awesome feature which I like the most in C#. The abstraction, expressiveness and the power it offers to the code are simply amazing. In general when we think of abstractions, we tend to think towards expressiveness and <a href="http://martinfowler.com/bliki/FluentInterface.html">fluent interfaces</a> and get carried away.</p>

<p>Efficiency of an abstraction is often an afterthought (Based on my experience, correct me if am wrong) and also it is very hard to define an abstraction which should be efficient for all the real world problems it address. When we encountered any efficiency issue in an abstraction, it is our primary responsibility to get rid of it.</p>

<p>Let us assume that you have found an efficiency issue with an abstraction. How would you troubleshoot it? Think! I believe, awareness of internals of the abstraction would be the prime prerequisite to circumvent the problem.&nbsp; Hence as a professional developer we should be aware of what is happening under the hood when we use LINQ or any such kind of abstractions. Though we are not going to employ this in most of our coding efforts, I feel it would be an ideal weapon that we should keep in our arsenal.</p>

<p>I have encountered one of such efficiency issue with LINQ and it really made me to think twice (even thrice) before applying LINQ to solve the problems. Let me explain it through a simple example. Here is the problem which I am going to solve through LINQ.</p>

<p>“I need a method that should take a collection of numbers as its parameter and write all the numbers in the console. If the collection contains only one number it should not write anything”</p>

<p>Here is the code snippet which address this problem and along with the output.
	<div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-22Zod3zjsX0/TrJi6zjlU9I/AAAAAAAAALc/oK_RVfhUQOs/s1600/1.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="112" src="http://4.bp.blogspot.com/-22Zod3zjsX0/TrJi6zjlU9I/AAAAAAAAALc/oK_RVfhUQOs/s320/1.PNG" width="320" /></a></div>
</p>

<p>I have used two abstractions on this function, one is the LINQ extension method “Count” and the other one is iterating through the enumeration abstraction. Would you able to find an efficiency issue lurking on this very simple function? Kudos if you find it out.
</p>

<p>Let me give a small background about LINQ extension methods and Enumeration. Most of the LINQ extension methods are using lazy execution internally and computes the enumeration on demand basis. However some extension methods (Count, Sum) collectively called <a href="http://code.msdn.microsoft.com/LINQ-Aggregate-Operators-c51b3869">Aggregate Operators</a> causes immediate execution instead of lazy execution on the enumeration. We can we make an enumeration to enumerate lazily by using <a href="http://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx">“yield”</a> statements. Enough theory, &nbsp;let us see some code which shows the efficiency issue associated with the function that we have seen earlier</p>

<div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-Gfsxz8fP4WU/TrJi642QHRI/AAAAAAAAALk/OsojBB--7jM/s1600/2.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="181" src="http://2.bp.blogspot.com/-Gfsxz8fP4WU/TrJi642QHRI/AAAAAAAAALk/OsojBB--7jM/s320/2.PNG" width="320" /></a></div>

<p>I have added some code in “PrintMe” method to log how it is actually getting executed. Also I have added the “GetNumbers” method which lazily creates a list of numbers using yield statement. </p>

<p>Now can you able to find the exact issue associated with the method “PrintMe”? The red lines are areas of concern. The list is yielded twice!! One while using the Aggregate Operator of LINQ “Count” which causes immediate execution results enumeration all the yields and the second one is yielding the list once again lazily when enumerating through “foreach” loop.</p>

<p>Though it is just a matter of nanoseconds in this example, it may be possible candidate of bottleneck in real world. So, whenever you are doing more than one operation on LINQ or an enumeration or both combined, do not forget think about efficiency. <em>In fact we should give a special attention to the speed of our algorithm when we are actually coding it.</em> (Refer <a href="http://pragprog.com/the-pragmatic-programmer">Pragmatic Programmer</a>, Chapter 6, While You Are Coding)</p>

<p>I hope now you are ready to think about efficiency when you code. Here in our case we can get rid of the efficiency issue by converting the enumeration of number to an array or a list using LINQ <a href="http://code.msdn.microsoft.com/LINQ-Conversion-Operators-e4e59714">convertor operators</a> ToArray or ToList respectively. Like aggregate operators it causes immediate execution and converts the enumeration to the target type. Then we can do the operations on the converted target. Here is the code snippet of that with the output.</p>

<div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-sJ0FDYxkl9Y/TrJi63comkI/AAAAAAAAALg/iPn8h9xdVOQ/s1600/3.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="97" src="http://3.bp.blogspot.com/-sJ0FDYxkl9Y/TrJi63comkI/AAAAAAAAALg/iPn8h9xdVOQ/s320/3.PNG" width="320" /></a></div>

<p>The modified code now iterate through the list only once!!</p>

<h4>Summary:</h4>

<p>Would you use powerful weapons to get rid of smaller problems, certainly not? LINQ is such kind of powerful weapon which is meant to solve powerful problems. So, think twice before using LINQ and don’t use it blindly. Efficiency Matters!! &nbsp;</p>
</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practice, Practice, Practice !!]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/09/15/practice-practice-practice/"/>
    <updated>2011-09-15T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/09/15/practice-practice-practice</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
	<p>In the pursuit of becoming a better programmer, I have come across lot of good things, which in fact have a lot of positive impact on my thinking, attitude and the way I approach a problem. &nbsp;One of such thing is the book “<a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">Passionate Programmer</a>” which I am currently reading. It is all about creating a remarkable career in software development. If you are a developer, it is a highly recommended book. &nbsp;&nbsp;&nbsp;&nbsp;</p>

	<p>There are a lot of impressive tips we can learn from this book of wisdom. One of Such tip is “Practice, Practice, and Practice!!” It talks about how to practice as a software developer. Though it seems like a mighty task, the author “Chad Fowler” convey this by breaking the might task into the following three category (Divide and Conquer Approach).</p>

<dl>
	<dt>Physical/Coordination</dt>
	<dd>
		<ul>
			<li>Learn and master the unexplored areas of the language that you are working with. Say for example, Regular Expressions</li>
			<li>Dig your language’s API and don’t reinvent the wheel</li>
		</ul>
	</dd>
	<dt>Sight Reading</dt>
	<dd>
		<ul>
			<li>Learn by reading the code </li>
			<li>Pick any of your favorite open source, explore it understand and learn the tips and tricks of the trade</li>
			<li>Add some new feature</li>
			<li>Be sure to vary the software you work with</li>
		</ul>
	</dd>
	<dt>Improvisation</dt>
	<dd>
		<ul>
			<li>Takes some structure or constraint and creating something new, on the fly on top of that structure. For example pick a simple program and try to write it with the self-imposed constraints</li>
			<li>Play with <a href="http://codekata.pragprog.com/">Code Katas</a></li>
		</ul>
	</dd> 
</dl>

<h4>It’s time for action</h4>

<p>I believe these three very fundamental aspects makes a lot of difference. So, I’ve decided to get my hands dirty with these three things and here is my list of to dos.</p>

<dl>
	<dt>Physical/Coordination – (I pick C# as its my primary language in my current role)</dt>
	<dd>
		<ul>
			<li>Regular Expressions</li>
			<li>Dynamic Programming</li>
			<li>Multithreading</li>
			<li>Parallel Programming</li>
			<li>LINQ</li>
			<li>Reflection</li>
			<li>Streams and Networking</li>
			<li>Entity Framework</li>
			<li>Data Structures and Algorithms</li>
			<li>Customizing MVC3 Framework</li>
		</ul>
	</dd>
	<dt>Sight Reading</dt>
	<dd>
		<ul>
			<li>Exploring ASP.NET MVC3 source code</li>
			<li>Exploring Nunit source Code</li>
			<li>Blog my understanding during this exploration</li>
		</ul>
	</dd>
	<dt>Improvisation</dt>
	<dd>
		<ul>
			<li>Make most of Code Katas</li>
			<li>Active participation in Technical Forums</li>
		</ul>
	</dd>
</dl>	
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Driving Model Validation in ASP.NET MVC3 - Part 2]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/08/17/test-driving-model-validation-in-aspnet_17/"/>
    <updated>2011-08-17T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/08/17/test-driving-model-validation-in-aspnet_17</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
<p style="text-align: justify;">
 In <a href="http://tamizhvendan.github.com/blog/2011/08/13/test-driving-model-validation-in-aspnet/">Part-1</a>of this small blog post series, we have explored a way to do the TDD of controller’s responsibility in the context of model validation. In this Part-2 we are going to see <strong>“How to do the TDD of Model Validation”</strong>
</p>

<p style="text-align: justify;">
 Before getting into the business let us have a quick look at how ASP.NET MVC3 does the model validation. Internally when making an Http POST/GET request, MVC3 makes use of a helper class <strong><a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.validator.aspx">Validator</a></strong> located in the namespace <em>System.ComponentModel.DataAnnotations.</em> Validator can be used to validate the models based on the <strong><a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.validationattribute.aspx">ValidationAttribute</a></strong> attributes associate with the model. After validating MVC3 adds the validation results to the controller’s <em>ModelState</em> Property by the <em>AddModelError</em> method which in turn sets the<em> ModelState.IsValid</em> property (Refer <a href="http://tamizhvendan.github.com/blog/2011/08/13/test-driving-model-validation-in-aspnet/">Part-1</a>). We are actually going to make use of this <em>Validator</em> helper class going to test drive the model validation. 
</p>

  <h4>Let us start with a small requirement</h4>
<div style="text-align: center;">
 <em>“Employee name should not be empty”</em>
</div>
<br />
 <p>The corresponding unit test will be like as follows</p>
 
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://4.bp.blogspot.com/-3Ql_dP2wJkE/Tku0g78apHI/AAAAAAAAAKw/gV-lTvda50I/s1600/UnitTest1.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="200px" qaa="true" src="http://4.bp.blogspot.com/-3Ql_dP2wJkE/Tku0g78apHI/AAAAAAAAAKw/gV-lTvda50I/s320/UnitTest1.PNG" width="320px" /></a></div>


 <p style="text-align: justify;">ValidateObject Method determines whether the specified object is valid using the validation context and throws a ValidationException if the object is invalid.</p>


 <p>Employee Model will be like as follows</p>
 
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://4.bp.blogspot.com/-URfST5ZPMwo/Tku0gsJJAxI/AAAAAAAAAKs/5K0GYH1ObLs/s1600/Emp1.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" qaa="true" src="http://4.bp.blogspot.com/-URfST5ZPMwo/Tku0gsJJAxI/AAAAAAAAAKs/5K0GYH1ObLs/s1600/Emp1.PNG" /></a></div>

<p style="text-align: justify;">

 When you run the test “EmployeeNameShouldNotBeEmpty”, it will <strong><span style="color: red;">Fail</span></strong> with the error message <em>“System.ComponentModel.DataAnnotations.ValidationException was expected”</em>. Now it’s time to make it <strong><span style="color: #00b050;">Pass. </span></strong>Thanks to <em>RequiredAttribute</em> we can make the test the pass without much effort. Just decorate the Name property with the <em>[Required]</em> Attribute. That’s it. Now run the test and it will <strong><span style="color: #00b050;">Pass.</span></strong> As there is no scope for Refactoring, we will be ignoring it.
</p>

 <p>Well, we have done the TDD of model validation. Now let’s move onto the next requirement. </p>
 <div style="text-align: center;">
 <em>“Employee age should be greater than 30”</em>
</div>
<br />
 <p style="text-align: justify;"> 
 Let’s write the unit test for this requirement.
 </p>
 
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://3.bp.blogspot.com/-cXpXTstCDr4/Tku0hg4cWDI/AAAAAAAAAK0/hahJBKoWOLI/s1600/UnitTest2.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="83px" qaa="true" src="http://3.bp.blogspot.com/-cXpXTstCDr4/Tku0hg4cWDI/AAAAAAAAAK0/hahJBKoWOLI/s320/UnitTest2.PNG" width="320px" /></a></div>
 
 <p>When we run the test, we’d get a failing test with error message “System.ComponentModel.DataAnnotations.ValidationException was expected”</p>

 <p>Like <em>RequiredAttribute</em> we don’t have any AgeLimit Attribute to make the test pass. However we can create such kind of CustomAttributes. Another approach would be making use of <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.ivalidatableobject.aspx"><em>IValiadatableObject</em></a></p>

 <p style="text-align: justify;">I will be using the latter option in this blog post, if you are interested in creating custom attribute refer this <a href="http://www.devtrends.co.uk/blog/the-complete-guide-to-validation-in-asp.net-mvc-3-part-2">blog post</a></p>

 <p>Here we go; the modified Employee model will look like as follows </p>

 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://1.bp.blogspot.com/-zAsuau_JXwA/Tku0iUzEgFI/AAAAAAAAAK4/J1t3gYaECmw/s1600/Emp2.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="119px" qaa="true" src="http://1.bp.blogspot.com/-zAsuau_JXwA/Tku0iUzEgFI/AAAAAAAAAK4/J1t3gYaECmw/s320/Emp2.PNG" width="320px" /></a></div>

 <p>
 The <em>Validator</em> helper class will invoke the Validate method of the model if the model passed to the <em>ValidateObject</em> Method implements the <em>IValidatableObject</em>.</p>

 <p>Hurrah! Now you will be getting a passing test. We have done the TDD of Model Validation. </p>
 <h3>Summary</h3>
 <p>The bottom-line is we should not combine the unit tests of model validation with the controller’s unit tests and both should be kept separate. You can download the source code which we’ve seen in this blog post series from </span><a href="http://www.box.net/shared/73e9m5d2ufyi6pazfq4j"><span style="font-family: Calibri;">here</span></a></p>
 </div>
 </div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Driving Model Validation in ASP.NET MVC3 - Part 1]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/08/13/test-driving-model-validation-in-aspnet/"/>
    <updated>2011-08-13T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/08/13/test-driving-model-validation-in-aspnet</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
 <p style="text-align: justify;">
 Entity
 Framework 4.1(EF4.1) provides in-built support for defining the validation
 constraints in model through Data Annotation attributes and Fluent API. It’s
 one of the cool features provided by EF4.1 that enables the developers to define
 validation rules of the model in an easy and more maintainable way. In addition
 to that MVC3 framework makes use of these validation model and supports both
 client and server side validation without writing any code!</p>

 <p style="text-align: justify;">
 I’m
 in the early days of practising Test Driven Development (TDD). Fortunately I
 have got an opportunity to implement TDD in my current assignment. I feel I am
 much oriented and focused towards the solution while using TDD. Also it makes
 me to critique my design and the way I do the coding. I would like to be a
 better programmer and looking forward to improve myself and hence TDD suits me
 more. Learning TDD and practising it is totally different! Yes, in theory it
 is very easy to read and understand TDD. But when you practise it, you will
 encounter many more interesting things about TDD and in fact it’s where you can
 actually learn TDD.</p>

 <p style="text-align: justify;">
 Okay,
 how to do TDD with Controller&#8217;s responsibility in the context of Model validation in MVC3. Well, it is easy but
 we should understand and find out what exactly we want to test and the way to
 test them. Many articles and blog posts suggest doing it through the controller.
 Is it really a good approach to test the model validation through
 controller?&nbsp;&nbsp; Kindly think of it for a
 moment. I feel it is not a right way to deal this stuff.&nbsp;</p>
 <p style="text-align: justify;">
 Let me explain
 it through a small example. Consider an Employee model which has two
 properties Name and Age&nbsp;and an EmployeeController responsible for doing
 CRUD on Employee Model. What is the responsibility of EmployeeController when creating a new Employee data? It should check whether the posted employee model is valid or not, if it is valid add to the database else return the view with the validation errors. MVC3 framework makes life easy by automatically validating the Posted model and set the <b>IsValid</b> Property of the ModelState and also add validation errors to the model. Hence controller&#8217;s job is very easy as follows</p>
 <p class="separator" style="clear: both; text-align: center;">
 <a href="http://2.bp.blogspot.com/-gMWdWyjaBxQ/TkYnWEIpWQI/AAAAAAAAAKI/mvc7iTeatok/s1600/Employee.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-gMWdWyjaBxQ/TkYnWEIpWQI/AAAAAAAAAKI/mvc7iTeatok/s1600/Employee.png" /></a></p>

 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://1.bp.blogspot.com/-DSw1qdzt9ZA/TkYYuJLxKGI/AAAAAAAAAJw/5k1AerK1wiE/s1600/EmpControllerResponsibility.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="189" src="http://1.bp.blogspot.com/-DSw1qdzt9ZA/TkYYuJLxKGI/AAAAAAAAAJw/5k1AerK1wiE/s320/EmpControllerResponsibility.png" width="320" /></a></div>
 <h4>Corresponding TestCases</h4>

 <ul>
 <li>When creating a new employee, if the passed employee data is valid, it should be added to the database</li>
 <li>When creating a new employee, if the passsed employee data is InValid, it should not add to the database and show the view with validation errors.</li>
 </ul>
 <br />
 <div style="text-align: justify;">
 The first unit test will be as following:</div>
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://3.bp.blogspot.com/-XEBOUhl7_WM/TkYgBqYX9VI/AAAAAAAAAJ0/wqKLvm_NGnw/s1600/EmpControllerUnitTest1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="161" src="http://3.bp.blogspot.com/-XEBOUhl7_WM/TkYgBqYX9VI/AAAAAAAAAJ0/wqKLvm_NGnw/s320/EmpControllerUnitTest1.png" width="320" /></a></div>
 <div class="separator" style="clear: both; text-align: center;">
 <br /></div>
 <p style="text-align: justify;">
 This unit test makes use of the following fake Database implementation.</p>
 <div style="text-align: justify;">
 <br /></div>
 <p class="separator" style="clear: both; text-align: center;">
 <a href="http://4.bp.blogspot.com/-c1GRZq3f1Ms/TkYiTwN9z4I/AAAAAAAAAJ4/lma-KtsMK6Q/s1600/fakeDatabase.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="136" src="http://4.bp.blogspot.com/-c1GRZq3f1Ms/TkYiTwN9z4I/AAAAAAAAAJ4/lma-KtsMK6Q/s320/fakeDatabase.png" width="320" /></a></p>
 <p style="text-align: justify;">
 To keep this blog post simple, I am not showcasing the TDD steps which I have done here and the EmployeeController Code would be as follows.</p>
 <div style="text-align: justify;">
 <br /></div>
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://1.bp.blogspot.com/-QRcFWLWNsmg/TkYkHGAoWnI/AAAAAAAAAJ8/FEit5wZZWs0/s1600/EmpController.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-QRcFWLWNsmg/TkYkHGAoWnI/AAAAAAAAAJ8/FEit5wZZWs0/s320/EmpController.png" width="315" /></a></div>
 <div class="separator" style="clear: both; text-align: center;">
 <br /></div>
 <p class="separator" style="clear: both; text-align: justify;">
 Employee Controller makes use of an InMemory Database (Simplest option!!) &nbsp;which implements the IRepository interface.&nbsp;</p>
 <div class="separator" style="clear: both; text-align: justify;">
 <br /></div>
 <p class="separator" style="clear: both; text-align: center;">
 <a href="http://1.bp.blogspot.com/-xy_kB-hQk9o/TkYlRVdooZI/AAAAAAAAAKA/nnxYCWTdTLg/s1600/IRepository.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-xy_kB-hQk9o/TkYlRVdooZI/AAAAAAAAAKA/nnxYCWTdTLg/s1600/IRepository.png" /></a></p>
 
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://2.bp.blogspot.com/-yU6djR74NeA/TkYlXKnjBOI/AAAAAAAAAKE/eXcZL2_7qew/s1600/InMemoryDb.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-yU6djR74NeA/TkYlXKnjBOI/AAAAAAAAAKE/eXcZL2_7qew/s1600/InMemoryDb.png" /></a></div>
 <div class="separator" style="clear: both; text-align: center;">
 <br /></div>
 <p class="separator" style="clear: both; text-align: justify;">
 I have done all the wire ups to make the first unit test pass. (Pardon me! For the sake of simplicity of this blog post I&#8217;ve violated TDD rules. Hope you can infer the TDD steps from the coding samples). Its time to &nbsp;move to the next unit test and here comes a bottleneck. &nbsp; &nbsp;</p>

 <p style="text-align: justify;">
 You may wonder what it is that. There comes a feature of ASP.NET MVC 3 framework. During HTTP post action the framework validates the employee model and sets the EmployeeController&#8217;s Property <em>ModelState.IsValid</em> to true or false. <b>It occurs only during HTTP post. </b>In our unit test code we are actually calling the action methods of the controller and not making any HTTP post. So, the ModalState is always true whenever we call the action methods of a controller from a unit testing code.&nbsp;</p>

 <p style="text-align: justify;">
 In our second test case, we need to setup a controller in such a way that its ModelState property is InValid. We can do this by adding a ModelError to the ModelState property of the EmployeeController. Infact it is what MVC3 framework is doing under the hood when making HTTP post.&nbsp;</p>
 
 <div class="separator" style="clear: both; text-align: center;">
 <a href="http://4.bp.blogspot.com/-iVcBB1yZRLI/TkYrDW5JloI/AAAAAAAAAKM/li_PACoQS1E/s1600/EmpControllerUnitTest2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="98" src="http://4.bp.blogspot.com/-iVcBB1yZRLI/TkYrDW5JloI/AAAAAAAAAKM/li_PACoQS1E/s320/EmpControllerUnitTest2.png" width="320" /></a></div>
 <div style="text-align: justify;">
 <br /></div>
 <h4>
 Hurrah! Thats it !!</h4>
 <div style="text-align: justify;">
 <br /></div>
 <p style="text-align: justify;">
 Now we Test drived the controller&#8217;s responsibility in the context of model validation. In my <a href="http://tamizhvendan.github.com/blog/2011/08/17/test-driving-model-validation-in-aspnet_17/">next blog post</a> &nbsp;I&#8217;d showcase how to test drive the model validation itself.</p>
 
 </div>
 </div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EF Code First 4.1  in Console Application]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/08/04/ef-code-first-41-in-console-application/"/>
    <updated>2011-08-04T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/08/04/ef-code-first-41-in-console-application</id>
    <content type="html"><![CDATA[<div class='post'>
<div>
		<p>Whenever I learn any new things in .Net or experimenting with something, I always prefer to use <em>Console Applications.</em> I personally feel it helps me to concentrate more on what actually I am trying to learn or experiment without any sort of distractions. Moreover it keeps things simple. </p>
	
		<p>I would like to do the same while learning EF Code First 4.1. Though most of articles in web explain EF with respect to ASP.NET MVC, I favor learning it through my own way using console application without creating any controllers and views!!</p>
	
	<h4>Following are the prerequisites to work with EF Code First 4.1</h4>
	<ul>
		<li>
			<a href="http://weblogs.asp.net/scottgu/archive/2011/03/15/visual-studio-2010-sp1.aspx">Visual Studio 2010 SP1</a>
		</li>
		<li>
			<a href="http://blogs.msdn.com/b/adonet/archive/2011/04/11/ef-4-1-released.aspx">Entity Framework 4.1</a>
		</li>
		<li>
			<a href="http://weblogs.asp.net/scottgu/archive/2011/01/11/vs-2010-sp1-and-sql-ce.aspx">SQL CE</a> or SQL Express (SQL CE would be an ideal option for learning purpose)
		</li>
			
	</ul>

	<h4>Show me the Code!</h4>
		<p>After creating a console application project, the initial step would be adding references to the following assemblies.
			<ul>	
				<li>EntityFramework (Version 4.1)</li>
				<li>System.Data.Entity</li>
				<li>System.ComponentModel.DataAnnotations</li>
			</ul>	
		</p>	
		
		<p>Now it’s time to defining the model and the data context. To keep it simple, I am going to define only one model “User”.</p>
			<a href="http://4.bp.blogspot.com/-FxoouXlWKxw/TjqAva1qsWI/AAAAAAAAAJM/5PLCVnNFhDQ/s1600/User.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="260px" src="http://4.bp.blogspot.com/-FxoouXlWKxw/TjqAva1qsWI/AAAAAAAAAJM/5PLCVnNFhDQ/s320/User.PNG" t$="true" width="320px" /></a>
		<p>The data context would be as following.</p>

		<a href="http://3.bp.blogspot.com/-2pLPCQePVKY/TjqAwJ-QD4I/AAAAAAAAAJU/X66hDdCw6eo/s1600/MyDataContext.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="169px" src="http://3.bp.blogspot.com/-2pLPCQePVKY/TjqAwJ-QD4I/AAAAAAAAAJU/X66hDdCw6eo/s320/MyDataContext.PNG" t$="true" width="320px" /></a>
		<p>This basic infrastructure is sufficient to run the console application. However as we are using the data context for learning purpose, we might change the model often and doing so will make it inconsistent with the database created automatically when you run the application for the first time. </p>
		<p> We can circumvent this situation by creating new Data Context initialize class that inherits from <em>DropCreateDatabaseIfModelChanges</em>&lt;TContext&gt; where TContext is the data context that you want to sync with the database always. This class also offers an override function <em>“Seed”</em> using which we can fill the database with some initial data.</p>

		<p>The finished code of DataContext initialize class will be like the following.</p>
		<a href="http://2.bp.blogspot.com/-fFqQJzPBGkY/TjqAwOW4nMI/AAAAAAAAAJY/DDY_VyYQHfI/s1600/MyDataContextInit.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="262px" src="http://2.bp.blogspot.com/-fFqQJzPBGkY/TjqAwOW4nMI/AAAAAAAAAJY/DDY_VyYQHfI/s320/MyDataContextInit.PNG" t$="true" width="320px" /></a>
		<p>This datacontext initialize class would create the database whenever the database model changes and create two users by default. Now it’s time to code our Main method.</p>
		<p>Here we go. Pay close attention to the first statement in the Main method that initializes the database with an instance of DataContextInit class that we have created.</p>
		<a href="http://4.bp.blogspot.com/-jl5r5Sk7m0Q/TjqAvdAJRPI/AAAAAAAAAJQ/elZcjzTNgEE/s1600/EFConsoleApp.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="223px" src="http://4.bp.blogspot.com/-jl5r5Sk7m0Q/TjqAvdAJRPI/AAAAAAAAAJQ/elZcjzTNgEE/s320/EFConsoleApp.PNG" t$="true" width="320px" /></a>
		
		<p>Now you can run the application without any configurations. The default behavior of EF Code First will create the database with the same name as your data context name here “MyDataContext” in the SQL Express server installed in the local machine. If you wish to change this default behavior and wanted to use SQL CE instead of SQL Express just add an App.Config to the project and create a connection string with the name of your data context as follows.</p>

		<a href="http://4.bp.blogspot.com/-YUZyAGX2KyA/TjqAvBuEd4I/AAAAAAAAAJI/p_UjE-K_lR8/s1600/Configuration.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="65px" src="http://4.bp.blogspot.com/-YUZyAGX2KyA/TjqAvBuEd4I/AAAAAAAAAJI/p_UjE-K_lR8/s320/Configuration.PNG" t$="true" width="320px" /></a>

		<p>That’s it. “Ctrl+F5” and here is the output</p>

		<a href="http://3.bp.blogspot.com/-l0IfgWCGZfQ/TjqAwX_8pnI/AAAAAAAAAJc/RLcjASqgaBo/s1600/Output.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="117px" src="http://3.bp.blogspot.com/-l0IfgWCGZfQ/TjqAwX_8pnI/AAAAAAAAAJc/RLcjASqgaBo/s320/Output.PNG" t$="true" width="320px" /></a>

		<h4>Summary</h4>
		<p>In this blog post we have explore the basic foundation on how to work with EF CodeFirst using console application. If you want to get your dirty with EF Code First without any distraction Console Application is a better one. You can download the sample code used in this blog post from <a href="http://www.box.net/shared/s0yu8b4sebp3dh9ru5gb">here.</a>
		</div>
	</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ajax.BeginForm – ASP.NET MVC3 Ajax – Part III]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/08/03/using-ajaxbeginform-aspnet-mvc3-ajax/"/>
    <updated>2011-08-03T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/08/03/using-ajaxbeginform-aspnet-mvc3-ajax</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In my previous blog posts <a href="http://tamizhvendan.github.com/blog/2011/06/24/aspnet-mvc-3-ajax-part-i/">Part 1</a>, <a href="http://tamizhvendan.github.com/blog/2011/06/26/ajax-mvc3-ajax-part-ii-adding-animation/">Part 2</a> we have explored how to use the <em>Ajax.ActionLink()</em> helper method to implement a basic Ajax request. In this blog post we have are going to see an another useful helper method <em>Ajax.BeginForm()</em></p>
<p>
We will be implementing the following scenario using the <em>Ajax.BeginForm()</em>. The scenario would be having a view consisting of a simple form with name and email field.<a href="http://3.bp.blogspot.com/-ymtu1zLXx3A/TjkOu1RpS_I/AAAAAAAAAIs/dbURJFeRGeA/s1600/AjaxBeginForm1.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320px" src="http://3.bp.blogspot.com/-ymtu1zLXx3A/TjkOu1RpS_I/AAAAAAAAAIs/dbURJFeRGeA/s320/AjaxBeginForm1.PNG" width="249px" /></a>
<p>Upon clicking the “Submit” button, the data will be sent back to the server via Ajax Post request and get a confirmation like this.</p><a href="http://4.bp.blogspot.com/-SvRqB-F2Yu4/TjkOuy-BpiI/AAAAAAAAAIw/er75G6DKkcU/s1600/AjaxBeginForm2.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-SvRqB-F2Yu4/TjkOuy-BpiI/AAAAAAAAAIw/er75G6DKkcU/s1600/AjaxBeginForm2.PNG" /></a> <p>ASP.NET MVC3 offers an intutive way to submitting/posting the form data to server via ajax using <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.ajax.ajaxextensions.beginform.aspx"><em>Ajax.BeginForm</em></a> helper method. Lets start developing the scenario by first defining the Model (Not using TDD to keep this blog post simple).</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System.ComponentModel.DataAnnotations</span><span class="p">;</span>
</span><span class='line'><span class="k">namespace</span> <span class="nn">UsingAjaxForms.Models</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">PersonalDetail</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="na">        [Required]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [Required]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="n">Email</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>To keep things simple, Our PersonalDetailsController will be having only two action methods. One will handling the “Get” request for Creating PersonalDetail and the other one for handling “Post” request for Creating PersonalDetail.
</p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System.Web.Mvc</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">UsingAjaxForms.Models</span><span class="p">;</span>
</span><span class='line'><span class="k">namespace</span> <span class="nn">UsingAjaxForms.Controllers</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">PersonalDetailController</span> <span class="p">:</span> <span class="n">Controller</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Create</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">personalDetail</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PersonalDetail</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">View</span><span class="p">(</span><span class="n">personalDetail</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">        [HttpPost]</span>
</span><span class='line'>        <span class="k">public</span> <span class="kt">string</span> <span class="nf">Create</span><span class="p">(</span><span class="n">PersonalDetail</span> <span class="n">personalDetails</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;Hi &quot;</span> <span class="p">+</span> <span class="n">personalDetails</span><span class="p">.</span><span class="n">Name</span> <span class="p">+</span> <span class="s">&quot;!. Thanks for providing the details.&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

	<p>Now, the stage is set to play using ajax. The View for Creating new PersonalDetail using Ajax is similar to that of using oridinary post back except one factor. We need to replace the Html.BeginForm helper method with the <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.ajax.ajaxextensions.beginform.aspx"><em>Ajax.BeginForm</em></a></p>

	<p>Ajax.BeginForm method has 11 overloads. On this blog post we are going to use the following overload. <em>Ajax.BeginForm(string actionName, string controllerName, AjaxOptions ajaxOptions)</em>
		<p>The actionName and controllerName points to the handler which is going to handle the ajax request and the ajaxOptions defines the behaviour of the ajax request. The View for Creating PersonalDetail will look like this</p>

		<div class="MsoNormal" style="margin: 0in 0in 10pt; text-align: justify; text-indent: 0.5in;"><div closure_uid_lmpfp9="213"><span style="font-family: Calibri;"><span style="mso-no-proof: yes;"><b style="mso-bidi-font-weight: normal;"><span closure_uid_lmpfp9="212" style="mso-tab-count: 1;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="mso-spacerun: yes;">&nbsp;&nbsp;</span><span style="mso-spacerun: yes;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></b></span><b style="mso-bidi-font-weight: normal;"></b></span></div></div><div class="MsoNormal" style="margin: 0in 0in 10pt; text-align: justify;"><div class="separator" style="border-bottom: medium none; border-left: medium none; border-right: medium none; border-top: medium none; clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-MbuiTU8NMKU/TjkOurokTOI/AAAAAAAAAIo/9FvQ9vtIDzw/s1600/AjaxBeginFormView.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-MbuiTU8NMKU/TjkOurokTOI/AAAAAAAAAIo/9FvQ9vtIDzw/s1600/AjaxBeginFormView.PNG" t$="true" /></a></div>
		<p>That’s it!! All you need to do is to enclose your form into an Ajax.BeginForm method wired with the necessary configurations. In this example the ajax form method takes care of wiring up submit form action to the given action method of the controller and update the result which it receives from the server using the <em>UpdateTargetId</em>. You can also play with the Ajax request by adding a loading animation as I have mentioned in <a href="http://tamizhvendan.github.com/blog/2011/06/26/ajax-mvc3-ajax-part-ii-adding-animation/">Part II blog post</a>. <strong>Note:</strong> Dont forget to add references to the jQuery script files</p>
		
	 	<h4>Summary:</h4>
		 <p>In this blog post we have seen a very basic way to create Ajax forms in ASP.NET MVC3. You can download the source code of this blog post from <a href="http://www.box.net/shared/kvktovzz5fiihtxemvr0">here</a></p>
		</div>
	]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A journey towards software craftsmanship]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/07/27/journey-towards-software-craftsmanship/"/>
    <updated>2011-07-27T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/07/27/journey-towards-software-craftsmanship</id>
    <content type="html"><![CDATA[<div class='post'>
<div><div><span ><p>Programming has been my passion right from the day I have seen computer. After nearly 3.7 years of experience (2 years of freelancing and 1.7 years of Industry), I found that there are lot of areas in programming where I need to improve myself especially in the art of software craftsmanship. Programming is really an art!!</p></span></div><div><span><p>Fine, I have the passion and wish to move to the next level but the key is get started and focussing my efforts on a right path. After some extensive internet searches and fruitful discussions with my colleagues, I have drawn a road map. I feel it is worth sharing through this blog as it might help someone who aspires to reach the next level in programming. </p></span></div><div><span><p>We can’t become Einstein in single night. We can’t become Sachin just by scoring a match winning century in a single match either. Likewise we can’t become a Master in Software Craftsmanship by just creating a single Killer Application. It takes a lot of efforts, passion, endurance persistence, temperament and a well-defined path to reach the top. </p></span></div><div><span><span>As a programmer/developer we all know very well about the benefits of Code Reuse. Have you ever thought of <i>Experience Reuse!! </i>Just think about it for some minutes. Obviously there is no replacement/substitute for Experience but what’s wrong in learning from others experience. It requires both hard work and smart work to make it to the next level. Here I am mentioning about smart work. Why are we doing the same mistakes which some people did already in their lives? <span style="mso-spacerun: yes;">&nbsp;</span>Why don’t we just learn it from them and get rid of those recurring mistakes. Come on, we are programmers, be smarter. Let’s learn from the some of the masters in the field and do some new mistakes.<div /><br/><p>Before start mentioning about those masters, I would like to thank my colleague “Jijesh Mohan” who has helped a lot and inspired me to start the journey (Now I hope, you will know what is mean by Experience Reuse). Here is the list of Masters.</p></span></div><ul><li><a href="http://blog.objectmentor.com/">Robert C Martin</a></li><li><a href="http://pragdave.pragprog.com/">Dave Thomas</a></li><li><a href="http://martinfowler.com/">Martin Fowler</a></li><li><a href="http://en.wikipedia.org/wiki/Ward_Cunningham">Ward Cunningham</a></li><li><a href="http://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a></li><li><a href="http://en.wikipedia.org/wiki/Grady_Booch">Grady Booch</a></li><li><a href="http://www.joelonsoftware.com/">Joel Spolsky</a></li><li><a href="http://www.catb.org/~esr/">Eric S Raymond</a></li></ul><div>One great thing about all these excellent folks is they share their knowledge, either through Books or through their blogs. We are very fortunate. Now it’s our turn to learn from their wisdom and move forward.</div> <br/><blockquote><p>The man who does not read good books has no advantage over the man who can&#8217;t read them.</p><footer><strong>Mark Twain</strong></footer></blockquote><div>I have found the following magnificent books in the quest</div><p><ul><li>Pragmatic Programmer – Andrew Hunt, Dave Thomas</li><ul><li>Must Read for every programmer. In my perspective it is the Bible of Programming</li></ul><li>Clean Code – Robert C Martin</li><li>Refactoring – Martin Fowler</li><li>Art of Unix Programming – Eric S Raymond</li></ul></p><div>I’ve read the Pragmatic Programmer and all others are in my “To-Read” list. I am really searching for words in dictionary to describe about “Pragmatic Programmer”. It is a “Gem”.</div><br /><div>When it comes to blogs, we have “Google Reader”. Just subscribe to the blog posts of these eminent people through Google Reader and learn the art of programming.</div><div>The stage has been setup. No one can ride bicycle by reading a book on “How to Ride Bicycle”. What books and blog posts would offer us is knowledge. In addition to knowledge to move further we need another thing called “Practice”. Yes get your hands dirty. Experiment, Research, Critique, Analyse, involve in healthy debates with your colleagues on various aspects of software craftsmanship, work and feel passionate about your work.</div><br/><div>I have pledged myself to follow the best practices in all my development works and no compromise on the quality of the code I write. In nutshell, I am going to care about my craft, think about my work and strive for excellence.</div><br/><div>I am in the very early stage of becoming a better programmer and looking forward to listen to your suggestions and inputs on this. When we grow older, we will be stronger. With all blessings and hope, the journey begins!</div> <br />]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Observer Pattern using Delegates V/s Observer Pattern using Events and Delegates]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/07/13/observer-pattern-using-delegates-vs/"/>
    <updated>2011-07-13T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/07/13/observer-pattern-using-delegates-vs</id>
    <content type="html"><![CDATA[<div class='post'>
	<p>
Most of the articles and texts in C# demonstrate the observer pattern using events and delegates. When going through one such text, a thought come across my mind. Why we are going for events when we can easily achieve the multicasting using Delegates alone. After some R&amp;D, I found it out why and hence this blog post. </p> <p>I am going to explain this “why” using a Weather Station example. To keep things simple, the Weather Station that we are going to see will keep track of only the temperature. Whenever the temperature changes, it simplify notifies its subscribers with the new temperature. Flash News is one of the subscribers which show the temperature in flash news. News Feed, another subscriber which adds the temperature information to the news feed. Fine, enough theory! It’s time to see the code.</p>
<p>Here is the implementation of Observer Pattern using Delegates alone. </p>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">DelegatesAndEvents</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">WeatherStation</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="kt">int</span> <span class="n">_temperature</span><span class="p">;</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">TemperatureReporter</span> <span class="n">Reporter</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int</span> <span class="n">Temperature</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_temperature</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="k">set</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">Reporter</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">Reporter</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">_tempearture</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">NewsFeed</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">WeatherStation</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">AddTemperatureInfoToFeed</span><span class="p">(</span><span class="kt">int</span> <span class="n">temperature</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;News Feed: New temperature &quot;</span> <span class="p">+</span> <span class="n">temperature</span> <span class="p">+</span> <span class="s">&quot; added to feed.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">NewsFeed</span><span class="p">(</span><span class="n">WeatherStation</span> <span class="n">weatherStation</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">weatherStation</span> <span class="p">=</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>            <span class="n">weatherStation</span><span class="p">.</span><span class="n">Reporter</span> <span class="p">+=</span> <span class="n">AddTemperatureInfoToFeed</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">FlashNews</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">WeatherStation</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ShowTemperatureInfoInFlashNews</span><span class="p">(</span><span class="kt">int</span> <span class="n">temperature</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Flash News: New temperature is &quot;</span> <span class="p">+</span> <span class="n">temperature</span> <span class="p">+</span> <span class="s">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">FlashNews</span><span class="p">(</span><span class="n">WeatherStation</span> <span class="n">weatherStation</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">weatherStation</span> <span class="p">=</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>            <span class="n">weatherStation</span><span class="p">.</span><span class="n">Reporter</span> <span class="p">+=</span> <span class="n">ShowTemperatureInfoInFlashNews</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

	<h4>The Main Program</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">DelegatesAndEvents</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">delegate</span> <span class="k">void</span> <span class="nf">TemperatureReporter</span><span class="p">(</span><span class="kt">int</span> <span class="n">tempearture</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Observer Pattern Using Delegates</span>
</span><span class='line'>            <span class="n">WeatherStation</span> <span class="n">weatherStation</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WeatherStation</span><span class="p">();</span>
</span><span class='line'>            <span class="n">FlashNews</span> <span class="n">flashNews</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FlashNews</span><span class="p">(</span><span class="n">weatherStation</span><span class="p">);</span>
</span><span class='line'>            <span class="n">NewsFeed</span> <span class="n">newsFeed</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NewsFeed</span><span class="p">(</span><span class="n">weatherStation</span><span class="p">);</span>
</span><span class='line'>            <span class="n">weatherStation</span><span class="p">.</span><span class="n">Temperature</span> <span class="p">=</span> <span class="m">30</span><span class="p">;</span>
</span><span class='line'>            <span class="n">weatherStation</span><span class="p">.</span><span class="n">Temperature</span> <span class="p">=</span> <span class="m">15</span><span class="p">;</span>
</span><span class='line'>            <span class="n">weatherStation</span><span class="p">.</span><span class="n">Temperature</span> <span class="p">=</span> <span class="m">45</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<h4>The output</h4><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-LjDx8rPsr50/Th0bSdtTyHI/AAAAAAAAAHk/dMBuF4GLgD0/s1600/delegates-output.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="http://1.bp.blogspot.com/-LjDx8rPsr50/Th0bSdtTyHI/AAAAAAAAAHk/dMBuF4GLgD0/s320/delegates-output.PNG" /></a></div>
<p>Hurrah! It’s working as expected. Both subscribers are get notified. We can implement the observer pattern using delegates alone. Stop for a minute and go through the code, is the implementation robust? Kudos if you are able to find the shortcomings of this implementation. If not continue reading. </p> <p>Think of a world where everyone is good. There is no need of police, no need of court either. But it is not the case. You may wonder why I am mentioning this here. This analogy holds true for the objective of this blog post too. There is no need of using events in the c# programming world if all the subscribers are good. Miserably, here also it is not the case. Hence we are going for events instead of using delegates alone. </p>
<h4>Drawbacks of using delegates alone</h4>
<ul><li>A subscriber can replace other subscribers by reassigning the delegate</li><li>A subscriber can clear all other subscribers also (by setting the delegate to null). </li><li>A subscriber can broadcast to other subscribers by invoking the delegate</li></ul>Clearly all the above 3 drawbacks violates the Observer Pattern.Here is our evil subscriber code implementation. 
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">DelegatesAndEvents</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">EvilSubscriber</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">WeatherStation</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">EvilMessage</span><span class="p">(</span><span class="kt">int</span> <span class="n">temperature</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;The temperature is &quot;</span> <span class="p">+</span> <span class="p">(</span><span class="n">temperature</span> <span class="p">*</span> <span class="m">100</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">EvilSubscriber</span><span class="p">(</span><span class="n">WeatherStation</span> <span class="n">weatherStation</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">weatherStation</span> <span class="p">=</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Broadcast to all the subscriber</span>
</span><span class='line'>            <span class="n">weatherStation</span><span class="p">.</span><span class="n">Reporter</span><span class="p">(</span><span class="m">60</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Reassign the subscriber            </span>
</span><span class='line'>            <span class="n">weatherStation</span><span class="p">.</span><span class="n">Reporter</span> <span class="p">=</span> <span class="n">EvilMessage</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Replace all the subscribers            </span>
</span><span class='line'>            <span class="n">weatherStation</span><span class="p">.</span><span class="n">Reporter</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hope now you understand the need of a better implementation of observer pattern. Here comes the salvage. Event! Use event along with delegates. With event in place, compiler will not allow the evil subscriber to get compiled. </p> 
<h4>Robust implementation of Weather Station using events</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">DelegatesAndEvents</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">WeatherStation2</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="kt">int</span> <span class="n">_tempearture</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">event</span> <span class="n">TemperatureReporter</span> <span class="n">Reporter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="kt">int</span> <span class="n">Temperature</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">get</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">_tempearture</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">set</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">Reporter</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">Reporter</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">_tempearture</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">NewsFeed2</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">WeatherStation2</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">AddTemperatureInfoToFeed</span><span class="p">(</span><span class="kt">int</span> <span class="n">temperature</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;News Feed2: New temperature &quot;</span> <span class="p">+</span> <span class="n">temperature</span> <span class="p">+</span> <span class="s">&quot; added to feed.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">NewsFeed2</span><span class="p">(</span><span class="n">WeatherStation2</span> <span class="n">weatherStation</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">weatherStation</span> <span class="p">=</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>            <span class="n">weatherStation</span><span class="p">.</span><span class="n">Reporter</span> <span class="p">+=</span> <span class="n">AddTemperatureInfoToFeed</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">FlashNews2</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">WeatherStation2</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ShowTemperatureInfoInFlashNews</span><span class="p">(</span><span class="kt">int</span> <span class="n">temperature</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Flash News2: New temperature is &quot;</span> <span class="p">+</span> <span class="n">temperature</span> <span class="p">+</span> <span class="s">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">FlashNews2</span><span class="p">(</span><span class="n">WeatherStation2</span> <span class="n">weatherStation</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">weatherStation</span> <span class="p">=</span> <span class="n">weatherStation</span><span class="p">;</span> <span class="n">weatherStation</span><span class="p">.</span><span class="n">Reporter</span> <span class="p">+=</span> <span class="n">ShowTemperatureInfoInFlashNews</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>    			
</span></code></pre></td></tr></table></div></figure>

<p>The unfortunate evil subscriber no longer compiles with events!</p> 
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">class</span> <span class="nc">EvilSubscriber2</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">WeatherStation2</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">EvilMessage</span><span class="p">(</span><span class="kt">int</span> <span class="n">temperature</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;The temperature is &quot;</span> <span class="p">+</span> <span class="p">(</span><span class="n">temperature</span> <span class="p">*</span> <span class="m">100</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">EvilSubscriber2</span><span class="p">(</span><span class="n">WeatherStation2</span> <span class="n">weatherStation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">weatherStation</span> <span class="p">=</span> <span class="n">weatherStation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Broadcast to all the subscriber         </span>
</span><span class='line'>        <span class="n">weatherStation</span><span class="p">.</span><span class="n">Reporter</span><span class="p">(</span><span class="m">60</span><span class="p">);</span> <span class="c1">// Compiler Error                </span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Reassign the subscriber                </span>
</span><span class='line'>        <span class="n">weatherStation</span><span class="p">.</span><span class="n">Reporter</span> <span class="p">=</span> <span class="n">EvilMessage</span><span class="p">;</span> <span class="c1">// Compiler Error  </span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Replace all the subscribers                 </span>
</span><span class='line'>        <span class="n">weatherStation</span><span class="p">.</span><span class="n">Reporter</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span> <span class="c1">// Compiler Error    </span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<br />
You&nbsp;can download the source code from <a href="http://www.box.net/shared/kunno1y9noj26qodstnz">here</a></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC3 Ajax Part II - Adding Animation to Action Link]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/06/26/ajax-mvc3-ajax-part-ii-adding-animation/"/>
    <updated>2011-06-26T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/06/26/ajax-mvc3-ajax-part-ii-adding-animation</id>
    <content type="html"><![CDATA[<div class='post'>
<div><p>This blog post is the continuation of my <a href="http://tamizhvendan.github.com/blog/2011/06/24/aspnet-mvc-3-ajax-part-i/">previous blog post</a>. In the last blog post we have seen how to achieve the basic Ajax functionality using <em>Ajax.ActionLink()</em> helper method. Probably in many websites you might have seen whenever any ajax request is raised by the user, there would be an associated loading text or a loading gif will be displayed which inform the user that something is going on the background. We are now going to see how to achieve the same using the <em>ActionLink()</em> method.</p>
	<p>
	<em>ActionLink()</em> method uses a&nbsp;declarative approach to do this. All we need to do is to create a div element contains the element which will be displayed during the Ajax request and associate the div element to the <em>ActionLink()</em> method by assigning the &#8221;<em>LoadingElementId</em>&#8221; AjaxOption to the div element&#8217;s id. Let us see how to do this by using the MVC3 app that we have seen in the <a href="http://tamizhvendan.github.com/blog/2011/06/24/aspnet-mvc-3-ajax-part-i/">previous blog post</a>.</p>
	<h3>Adding Loading Div Element</h3>
	Open &#8220;Index.cshtml&#8221; and append the following div. It just contains image element which will be displayed during ajax request.
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;divLoading&quot;</span> <span class="na">style=</span><span class="s">&quot;display:none&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>	<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;../../Content/images/loading.gif&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>
	<p>Note the inline style. The display has been set to none as it not intended to display only during Ajax request. </p>
	<h3>Associate Div Element with <em>ActionLink()</em> method</h3>
	<p>This is very simple. We just need to add the AjaxOption &#8221;<em>LoadingElementId</em>&#8221; and assign it to the loading div element&#8217;s id. The modified <em>ActionLink()</em> method will look as follows.</p><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-6NlSqFH_RBU/TgbDPO7tB_I/AAAAAAAAAHc/BEEQT3XEWmQ/s1600/ActionLink+Method.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="http://1.bp.blogspot.com/-6NlSqFH_RBU/TgbDPO7tB_I/AAAAAAAAAHc/BEEQT3XEWmQ/s320/ActionLink+Method.png" /></a></div><br />
	<h3>Simulating a delay in Action Method</h3><p>Now when we run the application we might not get a chance to see the loading gif as everything takes place is very less time. In order to see the loading gif, we need to increase the processing time taken by the GreetMe action method. The modified GreetMe action method in <em>HomeController.cs</em> will look as follows. The delay has been introduced by using the <em>Thread.Sleep()</em> method which delay the process by 2 seconds. </p>
	<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">GreetMe</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">2000</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;Hello ASP.NET MVC3 Ajax !!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
	<br />Now when we run the application we will be able to see the loading gif when the Greet Me link is clicked.
	<h3>Summary</h3>In the Part i &amp; ii of this series we have seen a basic Ajax functionality using <em>Ajax.ActionLink()</em> method. The source code of the demo application can be downloaded from <a href="http://www.box.net/shared/zmn84rj31g2kdx19flxq">here</a>.</div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC 3 Ajax - Part I]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/06/24/aspnet-mvc-3-ajax-part-i/"/>
    <updated>2011-06-24T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/06/24/aspnet-mvc-3-ajax-part-i</id>
    <content type="html"><![CDATA[<div class='post'>
<div>In this blog series ASP.NET MVC3 Ajax we are going to explore about implementing Ajax features in ASP.NET MVC3 Web application and this blog post will cover the basics of ASP.NET MVC3 Ajax.<p>MVC3 makes use of <a href="http://en.wikipedia.org/wiki/Unobtrusive_JavaScript">Unobtrusive javascript</a> which results a clear and clean seperation between the functionality and the View/Presention of the webpage. We can introduce Ajax features to the MVC3 application using two ways.</p><ol><li><h5>Ajax Helper Methods</h5> - Enable us to achieve Ajax without writing no/less javascript</li><li><h5>jQuery Ajax</h5> - We need to write the code using javascript and jQuery ajax</li></ol><p>Ajax Helper Methods are very simple and intutive to get start with. So, I&#8217;ll be covering the Ajax Helper Methods and will cover the jQuery Ajax in the future posts of this blog series.</p><h4>Ajax Helper Methods</h4>It enables us to implement ajax feature without writing much code. <i>Ajax.ActionLink()</i> is one of the fundamental Ajax helper method that returns a anchor element (&lt;a&gt;&lt;/a&gt;) with the URL of the action method; When the action link is clicked, the action method in the specified URL is invoked asynchronously and result is sent back to the client. Let us see it in detail by using sample demo application.<ul><li>Create a new ASP.NET MVC3 Project &#8220;AjaxGettingStarted&#8221; </li><li>Select &#8221;<b>Empty</b>&#8221; template and &#8221;<b>Razor</b>&#8221; as view engine and click &#8221;<b>Ok</b>&#8221;</li><li>ASP.NET MVC3 project template shipped with the <b>scripts folder </b>which contains the all the jQuery library files that are required for doing Ajax and other client side functionalities. To implement ajax we should use the references of &#8220;jQuery&#8221; and &#8220;jQuery.unobtrusive-ajax&#8221; minified js files in our view<div><a href="http://4.bp.blogspot.com/-cYTipiOz2uQ/TgR_YKzsliI/AAAAAAAAAHU/R8X1FQYpAfM/s1600/2.+Scripts+Folder.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320px" i$="true" src="http://4.bp.blogspot.com/-cYTipiOz2uQ/TgR_YKzsliI/AAAAAAAAAHU/R8X1FQYpAfM/s320/2.+Scripts+Folder.PNG" width="232px" /></a></div></li><a href="https://ch1blogs/blogs/211239/files/2011/06/2-scripts-folder.PNG" title="2-scripts-folder.PNG"></a>&nbsp;</li><li>Create a Controller with the name <em>HomeController</em> by right clicking the &#8220;Controllers&#8221; folder and select &#8220;Add&#8221; -&gt; &#8220;Controller&#8221;</li><li>The HomeController.cs file will be created under controllers folder with the following code.
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HomeController</span> <span class="p">:</span> <span class="n">Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">Index</span><span class="p">()</span>
</span><span class='line'>	<span class="p">{</span>
</span><span class='line'>		<span class="k">return</span> <span class="nf">View</span><span class="p">();</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</li><li>Then right click inside the Index() Action Method and select &#8220;Add View&#8221;. Leave the default setting and click &#8220;Add&#8221;.</li><li>This would create the view &#8220;Index.cshtml&#8221; under the folder &#8220;Views/Home&#8221;.</li><li>Add the following action method in HomeController.cs file
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="nf">GreetMe</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello ASP.NET MVC3 Ajax!!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
This action method will be called asychronously called using Ajax.ActionLink helper method. This just written a string which will be displayed in the view via Ajax. </li></ul><ul><li>Add the script reference to the &#8220;jQuery&#8221; and &#8220;jQuery.unobtrusive-ajax&#8221; minified js files in Index.cshtml file.</li>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;@Url.Content(&quot;</span><span class="err">~/</span><span class="na">Scripts</span><span class="err">/</span><span class="na">jquery-1</span><span class="err">.</span><span class="na">5</span><span class="err">.</span><span class="na">1</span><span class="err">.</span><span class="na">min</span><span class="err">.</span><span class="na">js</span><span class="err">&quot;)&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;@Url.Content(&quot;</span><span class="err">~/</span><span class="na">Scripts</span><span class="err">/</span><span class="na">jquery</span><span class="err">.</span><span class="na">unobtrusive-ajax</span><span class="err">.</span><span class="na">js</span><span class="err">&quot;)&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<li><p>Now all the setup in place to implement the basic Ajax functionality using Ajax.ActionLink Helper method. Before seeing this method in action let me explain bit more about this method. There are 12 overloads for this method amoung which the simplest one is </p> <em>Ajax.ActionLink(string linkText, string actionName, AjaxOptions ajaxOptions)</em> <p>The first parameter is the Link text which will be displayed in the view, the second parameter is the name of the action method which should be invoked while clicking the action link and the third parameter is AjaxOptions which defines how the Ajax request/response will take place and used to tell MVC exactly what you want your Ajax call to do.</p></li></ul><ul><li>AjaxOptions class will have the following properties
<ol><li>Confirm - Gets or sets the message to display in a confirmation window before a request is submitted.</li><li>HttpMethod - Gets or sets the HTTP request method (&#8220;Get&#8221; or &#8220;Post&#8221;).</li>
	<li>InsertionMode - Gets or sets the mode that specifies how to insert the response into the target DOM element</li><li>LoadingElementId - Gets or sets the id attribute of an HTML element that is displayed while the Ajax function is loading.</li><li>OnBegin - Gets or sets the name of the JavaScript function to call immediately before the page is updated. </li><li>OnComplete - Gets or sets the JavaScript function to call when response data has been instantiated but before the page is updated. </li><li>OnError - Gets or sets the JavaScript function to call if the page update fails.</li><li>OnSuccess - Gets or sets the JavaScript function to call after the page is successfully updated.</li><li>UpdateTargetId - Gets or sets the ID of the DOM element to update by using the response from the server.</li><li>URL - Gets or sets the URL to make the request to.</li></ol></li></ul><ul><li>In our sample demo application we are just going to have a link called &#8220;Greet Me&#8221;. Upon clicking on that click we are going make Ajax request to GreetMe action method and populate a div tag with the value returned by the action method</li><li>Add the following code in the index.cshtml file. which implements the above step.
	<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div id="divGreetings">
</span><span class='line'>	@Ajax.ActionLink("Greet Me", "GreetMe", 
</span><span class='line'>		new AjaxOptions() {
</span><span class='line'>			UpdateTargetId="divGreetings", 
</span><span class='line'>			HttpMethod="GET"                	
</span><span class='line'>		}
</span><span class='line'>	)
</span><span class='line'>&lt;/div></span></code></pre></td></tr></table></div></figure>
	This ActionLink method call just creates an Ajax action link with the text &#8220;Greet Me&#8221;, upon clicking the link it invoke the &#8220;GreetMe&#8221; action method name which we already defined in the HomeController with the ajax option &#8220;HttpGetRequest&#8221; and update the Dom element with id &#8220;divGreetings&#8221; with the results that we are getting from the GreetMe action method, which is a simple string &#8220;Hello ASP.NET MVC3 Ajax!!&#8221;</li></ul><div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-X90DCHXAEQQ/TgWJkXaXijI/AAAAAAAAAHY/pKzrPDNWNF4/s1600/3-output.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="102" src="http://3.bp.blogspot.com/-X90DCHXAEQQ/TgWJkXaXijI/AAAAAAAAAHY/pKzrPDNWNF4/s320/3-output.PNG" width="320" /></a></div><a href="https://ch1blogs/blogs/211239/files/2011/06/3-output.PNG" title="3-output.PNG"></a> </div>
	<strong>Summary</strong><p>In this blog post we have implemented a basic ajax feature using Ajax.ActionLink helper method. In the <a href="http://tamizhvendan.github.com/blog/2011/06/26/ajax-mvc3-ajax-part-ii-adding-animation/"> next blog post </a> of the series we would see how to add some add interative animation during the ajax request.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Polymorphism - A Real time example]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/04/24/dynamic-polymorphism-real-time-example/"/>
    <updated>2011-04-24T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/04/24/dynamic-polymorphism-real-time-example</id>
    <content type="html"><![CDATA[<div class='post'>
<div><div><div><div><div><div>In this blog post we are going to see, how to achieve dynamic polymorphism in c# using interfaces through a small game simulator called &#8220;War&#8221;.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-F-5wRIWJiKE/TbOvdE6MOnI/AAAAAAAAAGM/r1vs5p8LzUE/s1600/WarForm.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="221px" src="http://3.bp.blogspot.com/-F-5wRIWJiKE/TbOvdE6MOnI/AAAAAAAAAGM/r1vs5p8LzUE/s320/WarForm.png" width="320px" /></a></div><br />
<p>The simulator is simple and straight forward to play. The user just need to select a weapon and click on &#8220;Attack&#8221;.<br /> </br>
<p>Let me explain some theoretical background about &#8220;Dynamic Polymorphism&#8221; before dive into implementing the Game simulator. To put in a simple terms, Dynamic Polymorphism means changing the behavior at run time. Let us see an example of what does it mean. If a dog smells a cat, it will bark and if it smells a food, it will salivate. Here, the smelling sense of the dog is same. But depending on what does it smell, it change its behavior. Hope now you are aware of what is mean by dynamic polymorphism. Just stop reading and think what is the dynamic polymorphic behavior here in the &#8220;War&#8221; simulator.</p>.<br />Yes, you are absolutely correct!! The Attacking behavior is the dynamic polymorphic behavior. The behavior of attack button will vary with respect to the weapon the user has chosen.&nbsp; <br /><br />Fine.. Lets dive into the code!!<br /><br /><h4>Step1: Design the Main Form</h4><ol><li>Create a new Windows Forms Application and name it as &#8220;War&#8221;</li><li>Rename the &#8220;Form1.cs&#8221; file to &#8220;MainForm.cs&#8221; and Click &#8220;Yes&#8221; to let the Visual Studio to do the renaming for you.</li><li>Add a groupbox control and change its &#8220;Text&#8221; Property to &#8220;Weapon&#8221;</li><li>Add three radio button controls inside the groupbox and change their &#8220;Text&#8221; Property to Sword, Gun and bomb respectively.</li><li>Add a button control and change its &#8220;Text&#8221; property to &#8220;Attack!!&#8221;.</li><li>Rename the &#8220;Name &#8221; property of all the controls added to some meaningful names like rboSword for Sword Radiobutton</li><li>The Final Finished will look like the screenshot in the beginning of this blog.&nbsp;&nbsp; </li></ol><h4>Step 2: Create an Interface called IWeapon</h4><ol><li>Right click on the Project name &#8220;War&#8221; in the solution explorer and add a new interface file called &#8220;IWeapon.cs&#8221;</li><li>This interface IWeapon will have a public method called &#8220;Attack&#8221; which defines a contract so that all the Weapon we are going to create should implement this IWeapon interface and provide the implementation code for the Attack() method</li></ol></div>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IWeapon</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">void</span> <span class="nf">Attack</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div><h4>Step3: Create the concrete Weapon Classes&nbsp;</h4><ol><li>Add three class files to the &#8220;War&#8221; Project with the names &#8220;Sword.cs&#8221;, &#8220;&#8221;Gun.cs&#8221;, &#8220;Bomb.cs&#8221;</li><li>These classes represents the actual weapons and that we are going use in our simulator. Each of these classes will implement the IWeapon interface and provide the implementation code for the &#8220;Attack()&#8221; method.</li><li>Modify the class files as follows</li></ol></div>
<h6>Sword.cs</h6>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Sword</span> <span class="p">:</span> <span class="n">IWeapon</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Attack</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="n">Windows</span><span class="p">.</span><span class="n">Forms</span><span class="p">.</span><span class="n">MessageBox</span><span class="p">.</span><span class="n">Show</span><span class="p">(</span><span class="s">&quot;Sword!!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<h6>Gun.cs</h6>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Gun</span> <span class="p">:</span> <span class="n">IWeapon</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Attack</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="n">Windows</span><span class="p">.</span><span class="n">Forms</span><span class="p">.</span><span class="n">MessageBox</span><span class="p">.</span><span class="n">Show</span><span class="p">(</span><span class="s">&quot;Gun!!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<h6>Bomb.cs</h6>
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Bomb</span> <span class="p">:</span> <span class="n">IWeapon</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Attack</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">System</span><span class="p">.</span><span class="n">Windows</span><span class="p">.</span><span class="n">Forms</span><span class="p">.</span><span class="n">MessageBox</span><span class="p">.</span><span class="n">Show</span><span class="p">(</span><span class="s">&quot;Bomb!!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>
The Attack() method will show a message box with a text saying the weapon name being used.<br /><br />
<h4>Step 4: Program the &#8220;War&#8221; Simulator Main Form</h4><br />Now the stage is set for the real show. Let us wire the code of MainForm.cs and make the &#8220;War&#8221; simulator.<br /><ol><li>Add a private instance variable of type IWeapon in the MainForm class and initialize with the sword class. This will hold the reference of current weapon being used Note: Sword is the default weapon.
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MainForm</span> <span class="p">:</span> <span class="n">Form</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="k">private</span> <span class="n">IWeapon</span> <span class="n">weapon</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sword</span><span class="p">();</span>	
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</li>
<li>Now we are going to add event handlers for the weapons radiobuttons. They will change the reference stored in the instance variable &#8220;weapon&#8221; to the respective Weapons class. Add the checked change event for all the radio button and their event handlers will look like as follows.
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">rboSword_CheckedChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">weapon</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sword</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">rboGun_CheckedChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">weapon</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Gun</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">rboBomb_CheckedChanged</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">weapon</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Bomb</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
	</li><li>Add the Click event handler for the &#8220;Attack&#8221; button. This event handler will simply call the Attack() method of the instance variable &#8220;weapon&#8221;<br />
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">btnAttack_Click</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">weapon</span><span class="p">.</span><span class="n">Attack</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</li></ol></div><b>Summary</b><br />In this blog we have seen a basic real time example on implementing dynamic polymorphism.<b> </b>You can download the source code of this sample from <a href="http://www.box.net/shared/y12zyr2d66">here</a>.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entity Framework 4.0 As Class Library - Part 2]]></title>
    <link href="http://tamizhvendan.github.com/blog/2011/04/01/entity-framework-40-as-class-library/"/>
    <updated>2011-04-01T00:00:00+05:30</updated>
    <id>http://tamizhvendan.github.com/blog/2011/04/01/entity-framework-40-as-class-library</id>
    <content type="html"><![CDATA[<div class='post'>
<div></a>As the continuation of my previous <a href="http://tamizhvendan.github.com/blog/2011/03/25/entity-framework-40-class-library-part/">blog post</a>, In this blog post we are going to explore on how to consume the data access class library created in the previous blog post.<p>Consuming the Data Access Library created using Entity Framework 4.0 involves the following two steps.<br /><ol><li>Adding reference to the class library</li><li>Adding the connection string in the config file (App.config or Web.config)</li></ol>Let us see how can we do these steps using a console application. To keep things simple I have opt for a console application. It holds the same for an ASP.NET , Windows Form, WPF,WCF, etc.</p><h3>Console Application Creation</h3>Create a new console application called &#8220;HrdConsoleApp&#8221;<br /><a href="http://1.bp.blogspot.com/-jd1uE7HyzUY/TZw4OSKgKVI/AAAAAAAAAFw/O0t-17BazAk/s1600/1.ConsoleAppCreation.PNG" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="221px" src="http://1.bp.blogspot.com/-jd1uE7HyzUY/TZw4OSKgKVI/AAAAAAAAAFw/O0t-17BazAk/s320/1.ConsoleAppCreation.PNG" width="320px" /></a><br /><a href="https://ch1blogs/blogs/211239/files/2011/04/1consoleappcreation.PNG" title="1consoleappcreation.PNG"></a><br /><br /><b>Add a reference to the Class library</b><br /><br />Right click on references and refer the class library &#8220;HRD.DataAccess&#8221; that we have created in the last blog. <br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-238LBeCcS-8/TZw4UoXoTyI/AAAAAAAAAF0/Z-wMwpTZD1k/s1600/2.ReferenceLibrary.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="267px" src="http://4.bp.blogspot.com/-238LBeCcS-8/TZw4UoXoTyI/AAAAAAAAAF0/Z-wMwpTZD1k/s320/2.ReferenceLibrary.PNG" width="320px" /></a></div><b></b><br /><br />Add reference to System.Data.Entity Library<br /><a href="http://4.bp.blogspot.com/-TIhl2OiTt68/TZw59TQrQ6I/AAAAAAAAAF8/WM5ffjSpETo/s1600/5.DataEntityReference.PNG" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="267px" src="http://4.bp.blogspot.com/-TIhl2OiTt68/TZw59TQrQ6I/AAAAAAAAAF8/WM5ffjSpETo/s320/5.DataEntityReference.PNG" width="320px" /></a><a href="https://ch1blogs/blogs/211239/files/2011/04/5dataentityreference.PNG" title="5dataentityreference.PNG"><br /></a><br /><br />Add the App.Config file to the console application by right clicking on the project name in the solution explorer and select &#8220;Add-&gt;New Item&#8221;. Then Copy the connection string from the App.Config file created in the HrdDataAccess Class library Project created earlier and paste it in the App.config file created in the previous step.<br /><a href="http://2.bp.blogspot.com/-ZqMXJ5KdLy8/TZw4Y1uECQI/AAAAAAAAAF4/fIcRIy1se5c/s1600/3.AppConfigCreation.PNG" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img src="http://2.bp.blogspot.com/-ZqMXJ5KdLy8/TZw4Y1uECQI/AAAAAAAAAF4/fIcRIy1se5c/s320/3.AppConfigCreation.PNG" /></img><br /><p><a href="http://4.bp.blogspot.com/-TIhl2OiTt68/TZw59TQrQ6I/AAAAAAAAAF8/WM5ffjSpETo/s1600/5.DataEntityReference.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"></a></p>
<a href="http://2.bp.blogspot.com/-HgFzRYacpQA/TZw6IqMd5oI/AAAAAAAAAGA/q_IiJsTNYvU/s1600/4.AppConfig.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img src="http://2.bp.blogspot.com/-HgFzRYacpQA/TZw6IqMd5oI/AAAAAAAAAGA/q_IiJsTNYvU/s320/4.AppConfig.PNG"/></a><a href="http://2.bp.blogspot.com/-ZqMXJ5KdLy8/TZw4Y1uECQI/AAAAAAAAAF4/fIcRIy1se5c/s1600/3.AppConfigCreation.PNG" imageanchor="1"></a><p>Thats all now it is all set to access the database with only minimal amount of code.. Here we go!!</p><br /><h3>Code Please!</h3>
<br />
<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">HRD.DataAccess</span><span class="p">;</span>
</span><span class='line'><span class="k">namespace</span> <span class="nn">HrdConsoleApp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">hrdEntities</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HRDEntities</span><span class="p">();</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="n">Employee</span> <span class="n">employee</span> <span class="k">in</span> <span class="n">hrdEntities</span><span class="p">.</span><span class="n">Employees</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Name: &quot;</span> <span class="p">+</span> <span class="n">employee</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Department: &quot;</span> <span class="p">+</span> <span class="n">employee</span><span class="p">.</span><span class="n">Department</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;########################&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

	<br /><b>Output</b> <br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-Fooy-W2-OCQ/TZw6M7tVqTI/AAAAAAAAAGE/tJ5UYVi5LRI/s1600/6.Output.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="161px" src="http://1.bp.blogspot.com/-Fooy-W2-OCQ/TZw6M7tVqTI/AAAAAAAAAGE/tJ5UYVi5LRI/s320/6.Output.PNG" width="320px" /></a></div><a href="https://ch1blogs/blogs/211239/files/2011/04/6output.PNG" title="6output.PNG"><br /></a><br /><br /><b>Summary:</b><br /><br />In this blog series (Part 1 and Part 2) we have seen how to create the data access layer using Entity Framework 4.0 as class library and how to consume it in an application. With the introduction of Entity Framework developing the code for data access layer is no longer a tidy and time consuming job!!</div></div>
]]></content>
  </entry>
  
</feed>
